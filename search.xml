<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习随笔：渲染管线之透视矩阵</title>
      <link href="/2020/03/04/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E4%B9%8B%E9%80%8F%E8%A7%86%E7%9F%A9%E9%98%B5/"/>
      <url>/2020/03/04/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E4%B9%8B%E9%80%8F%E8%A7%86%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>投影变换完成的是将一个三维物体投影到二维视口中，这是一个三维到二维的过程；可以通俗的理解为为摄像机调整焦距。焦距不一样能看到的空间大小也不一样；摄像机能看到的空间范围可以命其名为视锥体；</p><h1 id="视锥体"><a href="#视锥体" class="headerlink" title="视锥体"></a>视锥体</h1><p>视锥体是一个三维体，他的位置和摄像机相关，视锥体的形状决定了模型如何从摄像机空间投影到屏幕上。最常见的投影类型-透视投影，使得离摄像机近的物体投影后较大，而离摄像机较远的物体投影后较小。透视投影使用棱锥作为视锥体，摄像机位于棱锥的椎顶。该棱锥被前后两个平面截断，形成一个棱台，叫做视锥体，只有位于锥体内部的模型才是可见的。<br><img src="https://img-blog.csdnimg.cn/20200304132637941.png" alt="在这里插入图片描述"></p><h1 id="透视投影的目的"><a href="#透视投影的目的" class="headerlink" title="透视投影的目的"></a>透视投影的目的</h1><p>透视投影的目的就是将上面的棱台转换为一个立方体。这个变换的过程是将棱台较小的部分放大，较大的部分缩小，以形成最终的立方体。这就是投影变换会产生近大远小的效果的原因。变换后的x坐标范围是[-1, 1]，y坐标范围是[-1, 1]，z坐标范围是[-1, 1]。<br><img src="https://img-blog.csdnimg.cn/20200304144929469.png" alt="在这里插入图片描述"></p><h1 id="透视矩阵推导"><a href="#透视矩阵推导" class="headerlink" title="透视矩阵推导"></a>透视矩阵推导</h1><p>下面来推导一下透视投影矩阵，这样我们就可以自己设置投影矩阵了。那么透视投影到底做了什么工作呢？<br>经过相机矩阵的变换，顶点被变换到了相机空间。这个时候的多边形也许会被视锥体裁剪，但在这个不规则的体中进行裁剪并非那么容易的事情，所以经过图形学前辈们的精心分析，裁剪被安排到规则观察体(Canonical View Volume, CVV)中进行，CVV是一个正方体，x, y, z的范围都是[-1，1]，多边形裁剪就是用这个规则体完成的。<br>所以，事实上是透视投影变换由两步组成：</p><p>1）  用透视变换矩阵把顶点从视锥体中变换到裁剪空间的CVV中。</p><p>2）  CVV裁剪完成后进行透视除法</p><p>MP=P’’;<br>其中P是列向量；且转换为齐次坐标形式；M设为如下矩阵：<br><img src="https://img-blog.csdnimg.cn/2020030413355935.png" alt="在这里插入图片描述"><br>由于CVV裁剪透视除法之前进行，则应该保证齐次坐标乘了透视投影矩阵之后，第四维应该只有深度值，为了得到M，首先应推导出点在NDC下的坐标，再将其转换成齐次坐标，然后对齐次坐标乘上深度，利用该齐次坐标最后反推出M，以下就说明如何求得M：</p><h2 id="投影到投影平面"><a href="#投影到投影平面" class="headerlink" title="投影到投影平面"></a>投影到投影平面</h2><p>先看如何投影到近平面：<br>为了简化问题，我们考虑YOZ平面上的投影情况，见下图。设P（x, y, z）是视锥体内一点，它在近剪裁平面上的投影是P’（x’, y’, z’）。设视锥体在Y方向的夹角为Θ<br><img src="https://img-blog.csdnimg.cn/20200304145221695.png" alt="在这里插入图片描述"><br>易知POQ与P’OQ’两个三角形相似；则由相似定理可以求得P‘的坐标：<br><img src="https://img-blog.csdnimg.cn/20200304145345242.png" alt="在这里插入图片描述"><br>同理，有<br><img src="https://img-blog.csdnimg.cn/2020030414544796.png" alt="在这里插入图片描述"><br>这样，我们便得到了P投影后的点P’<br><img src="https://img-blog.csdnimg.cn/20200304145504551.png" alt="在这里插入图片描述"><br>从上面可以看出，投影的结果z’始终等于-N，在投影面上。实际上，z’对于投影后的P’已经没有意义了，这个信息点已经没用了。但对于3D图形管线来说，为了便于进行后面的片元操作，例如z缓冲消隐算法，有必要把投影之前的z保存下来，方便后面使用。因此，我们利用这个没用的信息点存储-z，处理成：<br><img src="https://img-blog.csdnimg.cn/2020030415330521.png" alt="在这里插入图片描述"><br>那么我们就可以非常方便的用矩阵以及齐次坐标理论来表达投影变换：由于x’ y’ z’都有z作为分母，而齐次坐标各项同乘同除并不会影响原始坐标大小；所以对x’ y’ z’ 1都乘以-z；这个操作等于将原始深度值-z保存在了齐次坐标的第四维中，所以方程为：<br><img src="https://img-blog.csdnimg.cn/20200304153638909.png" alt="在这里插入图片描述"><br>这是初步的透视投影矩阵，还有些参数没完善。其中<br><img src="https://img-blog.csdnimg.cn/20200304153907348.png" alt="在这里插入图片描述"><br>M1为：<br><img src="https://img-blog.csdnimg.cn/20200304151024754.png" alt="在这里插入图片描述"><br>ab的求解以及透视除法如何进行，下文就以此说明。</p><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p>透视除法：<br><img src="https://img-blog.csdnimg.cn/20200304153957670.png" alt="在这里插入图片描述"><br>到了透视除法，深度信息现在用得上了，从齐次坐标转换为普通点坐标时，各项都除以第四维坐标。<br>经过这一步，就丢弃了原始的z值（得到了CVV中对应的z值,设为z’），顶点才算完成了投影。而在这两步之间的就是CVV裁剪过程，所以裁剪空间使用的是齐次坐标，主要原因在于透视除法会损失一些必要的信息（如原始z，第4个-z保留的）从而使裁剪变得更加难以处理。<br>x’ = -Nx/z;<br>y’ = -Ny/z;<br>z’ = -(az+b)/z;</p><p>后面的CVV应该是x’,y’,z’的范围都为[-1，1]的规则体，便于进行多边形裁剪。而我们可以适当的选择系数a和b，使得这个式子在z’ = -N的时候值为-1，而在z’ = -F的时候值为1，从而在z方向上构建CVV。</p><p>接下来我们就求出a和b：<br><img src="https://img-blog.csdnimg.cn/20200304154637762.png" alt="在这里插入图片描述"><br>现在z限制在了-1 和 1之间了；但是x’和y’仍没有进行线性变换，所以现在对x’ y’坐标进行变换；</p><p>我们知道-Nx / z的有效范围是投影平面的左边界值（记为left）和右边界值（记为right），即[left, right]，-Ny / z则为[bottom, top]。而现在我们想把-Nx / z属于[left, right]映射到x属于[-1, 1]中，-Ny / z属于[bottom, top]映射到y属于[-1, 1]中 ,由线性关系可得：<br><img src="https://img-blog.csdnimg.cn/20200304155430753.png" alt="在这里插入图片描述"><br>最终在NDC（归一化的设备坐标）中的投影点：<br><img src="https://img-blog.csdnimg.cn/2020030415551394.png" alt="在这里插入图片描述"><br>现在需要逆推出最终的透视矩阵，则齐次坐标应乘-z，使之第四维保留深度信息；所以解以下方程组则可得到M<br><img src="https://img-blog.csdnimg.cn/2020030415591898.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200304155940455.png" alt="在这里插入图片描述"><br>M就是最终的透视变换矩阵。相机空间中的顶点，如果在视锥体中，则变换后就在CVV中。如果在视锥体外，变换后就在CVV外。而CVV本身的规则性对于多边形的裁剪很有利。OpenGL在构建透视投影矩阵的时候就使用了M的形式。注意到M的最后一行不是(0 0 0 1)而是(0 0 -1 0)，<br>因此可以看出透视变换不是一种仿射变换，它是非线性的。另外一点你可能已经想到，对于投影面来说，它的宽和高大多数情况下不同，即宽高比不为1，比如640/480。而CVV的宽高是相同的，即宽高比永远是1。这就造成了多边形的失真现象，比如一个投影面上的正方形在CVV的面上可能变成了一个长方形。<br>解决这个问题的方法就是在对多变形进行透视变换、裁剪、透视除法之后，在归一化的设备坐标(Normalized Device Coordinates)上进行的视口(viewport)变换中进行校正，它会把归一化的顶点之间按照和投影面上相同的比例变换到视口中，从而解除透视投影变换带来的失真现象。<br>进行校正前提就是要使投影平面的宽高比和视口的宽高比相同。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习随笔：渲染管线之视角矩阵</title>
      <link href="/2020/03/04/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E4%B9%8B%E8%A7%86%E8%A7%92%E7%9F%A9%E9%98%B5/"/>
      <url>/2020/03/04/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E4%B9%8B%E8%A7%86%E8%A7%92%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>图形渲染管线主要包括两个功能：一是将物体3D坐标转变为屏幕空间2D坐标，二是为屏幕每个像素点进行着色。</p><h1 id="摄像机视角矩阵推导"><a href="#摄像机视角矩阵推导" class="headerlink" title="摄像机视角矩阵推导"></a>摄像机视角矩阵推导</h1><p>虚拟摄像机定义了我们的观察空间，需要将模型从世界坐标通过视角矩阵变换到观察坐标。我们需要理解视角矩阵的推导，才能在编写渲染器的时候知道要怎么写视角矩阵就可以变换相机得到渲染不同角度的二维图；简而言之就是摄像机在空间有着特定的位置及朝向，它所观察到的物体取决于物体与摄像机的相对位置。</p><p>要将物体的坐标变为观察坐标，也就是将摄像机变换到世界坐标的原点位置，以及它的坐标轴与世界坐标轴重合，物体做同样的坐标变换，这样物体的坐标就是相对于摄像机的新坐标，即观察坐标；那么要怎么才能求出摄像机所需的变换矩阵呢？</p><p>分为两步：先将摄像机的位置移到世界坐标的原点；然后将摄像机旋转，使其右上前三个方向与世界坐标轴重合。我们把摄像机的位置设为C = [cx cy cz 1]T（注：点的齐次坐标在第四维补1，向量补0。且本文的向量和矩阵后加T表示转置。下文略）;其三个表示朝向的坐标轴表示为U是右向量，V是上向量，W是前向量：[ux uy uz]T ,[vx vy vz]T ,[wx wy wz]T;视角变换的目的即把它的这些参数转换为：位置[ 0, 0, 0 ]T，以及三个坐标轴：[ 1, 0,0 ]T、[ 0, 1, 0 ]T、 [ 0, 0, 1 ]T。<br>第一步：平移。这个很简单。平移矩阵T为：<br>[1 0 0 -cx]<br>[0 1 0 -cy]<br>[0 0 1 -cz]<br>[0 0 0  1 ]<br>则TC = [0 0 0 0];<br>第二步：旋转；旋转操作需要点小技巧。我们的目的是把三个轴分别转换成[1,0,0]、[0,1,0]、[0,0,1]，令旋转矩阵为M，可以表示为如下所示：先设矩阵Z为：<br>   [ux vx  wx   0]<br>   [uy vy  wy   0]<br>  [uz vz  wz   0]<br>  [0   0    0    1 ]<br>  M<em>Z = I；<br>易知矩阵Z是一个正交矩阵，而正交矩阵有一个性质是矩阵的逆等于矩阵的转置；所以求得M为Z的转置；<br>所以M为：<br>   [ux  uy  uz   0]<br>   [vx  vy  vz   0]<br>  [wx  wy  wz   0]<br>  [0   0    0    1 ]<br>所以视角矩阵就是lookat = M</em>T；<br>但是直接使用这个矩阵其实是有问题的，若你的渲染器是模仿OpenGL，那观察空间是右手系，摄像机对着的方向应与世界坐标系的z轴正方向相反，所以实际变换的时候对前向量取反。<br>  OK， 视角矩阵的推导完毕，现在我们知道：<br>   任一时刻，通过摄像机位置C(cx,cy,cz)，以及三个坐标轴(U,V,W)，可以得到当前的视角变换矩阵;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习随笔：从4行代码看右值引用</title>
      <link href="/2020/02/20/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E4%BB%8E4%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9C%8B%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/"/>
      <url>/2020/02/20/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E4%BB%8E4%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9C%8B%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>　　右值引用的概念有些读者可能会感到陌生，其实他和C++98/03中的左值引用有些类似，例如，c++98/03中的左值引用是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int i &#x3D; 0;</span><br><span class="line">int&amp; j &#x3D; i;</span><br></pre></td></tr></table></figure><p>　　这里的int&amp;是对左值进行绑定（但是int&amp;却不能绑定右值），相应的，对右值进行绑定的引用就是右值引用，他的语法是这样的A&amp;&amp;，通过双引号来表示绑定类型为A的右值。通过&amp;&amp;我们就可以很方便的绑定右值了，比如我们可以这样绑定一个右值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int&amp;&amp; i &#x3D; 0;</span><br></pre></td></tr></table></figure><p>　　这里我们绑定了一个右值0，关于右值的概念会在后面介绍。右值引用是C++11中新增加的一个很重要的特性，他主是要用来解决C++98/03中遇到的两个问题，第一个问题就是临时对象非必要的昂贵的拷贝操作，第二个问题是在模板函数中如何按照参数的实际类型进行转发。通过引入右值引用，很好的解决了这两个问题，改进了程序性能，后面将会详细介绍右值引用是如何解决这两个问题的。</p><p>　　和右值引用相关的概念比较多，比如：右值、纯右值、将亡值、universal references、引用折叠、移动语义、move语义和完美转发等等。很多都是新概念，对于刚学习C++11右值引用的初学者来说，可能会觉得右值引用过于复杂，概念之间的关系难以理清。</p><p>右值引用实际上并没有那么复杂，其实是关于4行代码的故事，通过简单的4行代码我们就能清晰的理解右值引用相关的概念了。本文希望带领读者通过4行代码来理解右值引用相关的概念，理清他们之间的关系，并最终能透彻地掌握C++11的新特性–右值引用。</p><h1 id="四行代码的故事"><a href="#四行代码的故事" class="headerlink" title="四行代码的故事"></a>四行代码的故事</h1><h2 id="第1行代码的故事"><a href="#第1行代码的故事" class="headerlink" title="第1行代码的故事"></a>第1行代码的故事</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int i &#x3D; getVar();</span><br></pre></td></tr></table></figure><p>　　上面的这行代码很简单，从getVar()函数获取一个整形值，然而，这行代码会产生几种类型的值呢？答案是会产生两种类型的值，一种是左值i，一种是函数getVar()返回的临时值，这个临时值在表达式结束后就销毁了，而左值i在表达式结束后仍然存在，这个临时值就是右值，具体来说是一个纯右值，右值是不具名的。区分左值和右值的一个简单办法是：看能不能对表达式取地址，如果能，则为左值，否则为右值。</p><p>　　所有的具名变量或对象都是左值，而匿名变量则是右值，比如，简单的赋值语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int i &#x3D; 0;</span><br></pre></td></tr></table></figure><p>　　在这条语句中，i 是左值，0 是字面量，就是右值。在上面的代码中，i 可以被引用，0 就不可以了。具体来说上面的表达式中等号右边的0是纯右值（prvalue），在C++11中所有的值必属于左值、将亡值、纯右值三者之一。比如，非引用返回的临时变量、运算表达式产生的临时变量、原始字面量和lambda表达式等都是纯右值。而将亡值是C++11新增的、与右值引用相关的表达式，比如，将要被移动的对象、T&amp;&amp;函数返回值、std::move返回值和转换为T&amp;&amp;的类型的转换函数的返回值等。关于将亡值我们会在后面介绍，先看下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int j &#x3D; 5;</span><br><span class="line"></span><br><span class="line">auto f &#x3D; []&#123;return 5;&#125;;</span><br></pre></td></tr></table></figure><p>　　上面的代码中5是一个原始字面量， []{return 5;}是一个lambda表达式，都是属于纯右值，他们的特点是在表达式结束之后就销毁了。</p><p>　　通过地行代码我们对右值有了一个初步的认识，知道了什么是右值，接下来再来看看第二行代码。</p><h2 id="第2行代码的故事"><a href="#第2行代码的故事" class="headerlink" title="第2行代码的故事"></a>第2行代码的故事</h2><p>T&amp;&amp; k = getVar();<br>　　第二行代码和第一行代码很像，只是相比第一行代码多了“&amp;&amp;”，他就是右值引用，我们知道左值引用是对左值的引用，那么，对应的，对右值的引用就是右值引用，而且右值是匿名变量，我们也只能通过引用的方式来获取右值。虽然第二行代码和第一行代码看起来差别不大，但是实际上语义的差别很大，这里，getVar()产生的临时值不会像第一行代码那样，在表达式结束之后就销毁了，而是会被“续命”，他的生命周期将会通过右值引用得以延续，和变量k的声明周期一样长。</p><p>右值引用的第一个特点<br>　　通过右值引用的声明，右值又“重获新生”，其生命周期与右值引用类型变量的生命周期一样长，只要该变量还活着，该右值临时量将会一直存活下去。让我们通过一个简单的例子来看看右值的生命周期。如代码清单1-1所示。</p><p>代码清单1-1 </p><p>复制代码<br>#include <iostream><br>using namespace std;</p><p>int g_constructCount=0;<br>int g_copyConstructCount=0;<br>int g_destructCount=0;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">struct A</span><br><span class="line">&#123;</span><br><span class="line">    A()&#123;</span><br><span class="line">        cout&lt;&lt;&quot;construct: &quot;&lt;&lt;++g_constructCount&lt;&lt;endl;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    A(const A&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;copy construct: &quot;&lt;&lt;++g_copyConstructCount &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~A()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;destruct: &quot;&lt;&lt;++g_destructCount&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A GetA()</span><br><span class="line">&#123;</span><br><span class="line">    return A();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    A a &#x3D; GetA();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　为了清楚的观察临时值，在编译时设置编译选项-fno-elide-constructors用来关闭返回值优化效果。</p><p>　　输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">construct: 1</span><br><span class="line">copy construct: 1</span><br><span class="line">destruct: 1</span><br><span class="line">copy construct: 2</span><br><span class="line">destruct: 2</span><br><span class="line">destruct: 3</span><br></pre></td></tr></table></figure><p>　　从上面的例子中可以看到，在没有返回值优化的情况下，拷贝构造函数调用了两次，一次是GetA()函数内部创建的对象返回出来构造一个临时对象产生的，另一次是在main函数中构造a对象产生的。第二次的destruct是因为临时对象在构造a对象之后就销毁了。如果开启返回值优化的话，输出结果将是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">construct: 1</span><br><span class="line"></span><br><span class="line">destruct: 1</span><br></pre></td></tr></table></figure><p>　　可以看到返回值优化将会把临时对象优化掉，但这不是c++标准，是各编译器的优化规则。我们在回到之前提到的可以通过右值引用来延长临时右值的生命周期，如果上面的代码中我们通过右值引用来绑定函数返回值的话，结果又会是什么样的呢？在编译时设置编译选项-fno-elide-constructors。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">    A&amp;&amp; a &#x3D; GetA();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">construct: 1</span><br><span class="line">copy construct: 1</span><br><span class="line">destruct: 1</span><br><span class="line">destruct: 2</span><br></pre></td></tr></table></figure><p>　　通过右值引用，比之前少了一次拷贝构造和一次析构，原因在于右值引用绑定了右值，让临时右值的生命周期延长了。我们可以利用这个特点做一些性能优化，即避免临时对象的拷贝构造和析构，事实上，在c++98/03中，通过常量左值引用也经常用来做性能优化。上面的代码改成：</p><p>　　const A&amp; a = GetA();</p><p>　　输出的结果和右值引用一样，因为常量左值引用是一个“万能”的引用类型，可以接受左值、右值、常量左值和常量右值。需要注意的是普通的左值引用不能接受右值，比如这样的写法是不对的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　A&amp; a &#x3D; GetA();</span><br></pre></td></tr></table></figure><p>　　上面的代码会报一个编译错误，因为非常量左值引用只能接受左值。</p><p>右值引用的第二个特点<br>　　右值引用独立于左值和右值。意思是右值引用类型的变量可能是左值也可能是右值。比如下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int&amp;&amp; var1 &#x3D; 1;</span><br></pre></td></tr></table></figure><p>　　var1类型为右值引用，但var1本身是左值，因为具名变量都是左值。</p><p>　　关于右值引用一个有意思的问题是：T&amp;&amp;是什么，一定是右值吗？让我们来看看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T&gt;</span><br><span class="line">void f(T&amp;&amp; t)&#123;&#125;</span><br><span class="line"></span><br><span class="line">f(10); &#x2F;&#x2F;t是右值</span><br><span class="line"></span><br><span class="line">int x &#x3D; 10;</span><br><span class="line">f(x); &#x2F;&#x2F;t是左值</span><br></pre></td></tr></table></figure><p>　　从上面的代码中可以看到，T&amp;&amp;表示的值类型不确定，可能是左值又可能是右值，这一点看起来有点奇怪，这就是右值引用的一个特点。</p><p>右值引用的第三个特点<br>　　T&amp;&amp; t在发生自动类型推断的时候，它是未定的引用类型（universal references），如果被一个左值初始化，它就是一个左值；如果它被一个右值初始化，它就是一个右值，它是左值还是右值取决于它的初始化。</p><p>我们再回过头看上面的代码，对于函数template<typename T>void f(T&amp;&amp; t)，当参数为右值10的时候，根据universal references的特点，t被一个右值初始化，那么t就是右值；当参数为左值x时，t被一个左值引用初始化，那么t就是一个左值。需要注意的是，仅仅是当发生自动类型推导（如函数模板的类型自动推导，或auto关键字）的时候，T&amp;&amp;才是universal references。再看看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T&gt;</span><br><span class="line">void f(T&amp;&amp; param); </span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">class Test &#123;</span><br><span class="line">    Test(Test&amp;&amp; rhs); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>　　上面的例子中，param是universal reference，rhs是Test&amp;&amp;右值引用，因为模版函数f发生了类型推断，而Test&amp;&amp;并没有发生类型推导，因为Test&amp;&amp;是确定的类型了。</p><p>　　正是因为右值引用可能是左值也可能是右值，依赖于初始化，并不是一下子就确定的特点，我们可以利用这一点做很多文章，比如后面要介绍的移动语义和完美转发。</p><p>　　这里再提一下引用折叠，正是因为引入了右值引用，所以可能存在左值引用与右值引用和右值引用与右值引用的折叠，C++11确定了引用折叠的规则，规则是这样的：</p><p>所有的右值引用叠加到右值引用上仍然还是一个右值引用；<br>所有的其他引用类型之间的叠加都将变成左值引用。</p><h2 id="第3行代码的故事"><a href="#第3行代码的故事" class="headerlink" title="第3行代码的故事"></a>第3行代码的故事</h2><p>T(T&amp;&amp; a) : m_val(val){ a.m_val=nullptr; }<br>　　这行代码实际上来自于一个类的构造函数，构造函数的一个参数是一个右值引用，为什么将右值引用作为构造函数的参数呢？在解答这个问题之前我们先看一个例子。如代码清单1-2所示。</p><p>代码清单1-2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    A():m_ptr(new int(0))&#123;cout &lt;&lt; &quot;construct&quot; &lt;&lt; endl;&#125;</span><br><span class="line">    A(const A&amp; a):m_ptr(new int(*a.m_ptr)) &#x2F;&#x2F;深拷贝的拷贝构造函数</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;copy construct&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~A()&#123; delete m_ptr;&#125;</span><br><span class="line">private:</span><br><span class="line">    int* m_ptr;</span><br><span class="line">&#125;;</span><br><span class="line">int main() &#123;</span><br><span class="line">    A a &#x3D; GetA();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">    输出：</span><br><span class="line">construct</span><br><span class="line">copy construct</span><br><span class="line">copy construct</span><br></pre></td></tr></table></figure><p>　　这个例子很简单，一个带有堆内存的类，必须提供一个深拷贝拷贝构造函数，因为默认的拷贝构造函数是浅拷贝，会发生“指针悬挂”的问题。如果不提供深拷贝的拷贝构造函数，上面的测试代码将会发生错误（编译选项-fno-elide-constructors），内部的m_ptr将会被删除两次，一次是临时右值析构的时候删除一次，第二次外面构造的a对象释放时删除一次，而这两个对象的m_ptr是同一个指针，这就是所谓的指针悬挂问题。提供深拷贝的拷贝构造函数虽然可以保证正确，但是在有些时候会造成额外的性能损耗，因为有时候这种深拷贝是不必要的。比如下面的代码：</p><p><img src="https://img-blog.csdnimg.cn/20200220111643519.png" alt="在这里插入图片描述"></p><p>　　上面代码中的GetA函数会返回临时变量，然后通过这个临时变量拷贝构造了一个新的对象a，临时变量在拷贝构造完成之后就销毁了，如果堆内存很大的话，那么，这个拷贝构造的代价会很大，带来了额外的性能损失。每次都会产生临时变量并造成额外的性能损失，有没有办法避免临时变量造成的性能损失呢？答案是肯定的，C++11已经有了解决方法，看看下面的代码。如代码清单1-3所示。</p><p>代码清单1-3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    A() :m_ptr(new int(0))&#123;&#125;</span><br><span class="line">    A(const A&amp; a):m_ptr(new int(*a.m_ptr)) &#x2F;&#x2F;深拷贝的拷贝构造函数</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;copy construct&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    A(A&amp;&amp; a) :m_ptr(a.m_ptr)</span><br><span class="line">    &#123;</span><br><span class="line">        a.m_ptr &#x3D; nullptr;</span><br><span class="line">        cout &lt;&lt; &quot;move construct&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~A()&#123; delete m_ptr;&#125;</span><br><span class="line">private:</span><br><span class="line">    int* m_ptr;</span><br><span class="line">&#125;;</span><br><span class="line">int main()&#123;</span><br><span class="line">    A a &#x3D; Get(false); </span><br><span class="line">&#125; </span><br><span class="line">输出：</span><br><span class="line">construct</span><br><span class="line">move construct</span><br><span class="line">move construct</span><br></pre></td></tr></table></figure><p>　　代码清单1-3和1-2相比只多了一个构造函数，输出结果表明，并没有调用拷贝构造函数，只调用了move construct函数，让我们来看看这个move construct函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A(A&amp;&amp; a) :m_ptr(a.m_ptr)</span><br><span class="line">&#123;</span><br><span class="line">    a.m_ptr &#x3D; nullptr;</span><br><span class="line">    cout &lt;&lt; &quot;move construct&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　这个构造函数并没有做深拷贝，仅仅是将指针的所有者转移到了另外一个对象，同时，将参数对象a的指针置为空，这里仅仅是做了浅拷贝，因此，这个构造函数避免了临时变量的深拷贝问题。</p><p>　　上面这个函数其实就是移动构造函数，他的参数是一个右值引用类型，这里的A&amp;&amp;表示右值，为什么？前面已经提到，这里没有发生类型推断，是确定的右值引用类型。为什么会匹配到这个构造函数？因为这个构造函数只能接受右值参数，而函数返回值是右值，所以就会匹配到这个构造函数。这里的A&amp;&amp;可以看作是临时值的标识，对于临时值我们仅仅需要做浅拷贝即可，无需再做深拷贝，从而解决了前面提到的临时变量拷贝构造产生的性能损失的问题。这就是所谓的移动语义，右值引用的一个重要作用是用来支持移动语义的。</p><p>　　需要注意的一个细节是，我们提供移动构造函数的同时也会提供一个拷贝构造函数，以防止移动不成功的时候还能拷贝构造，使我们的代码更安全。</p><p>　　我们知道移动语义是通过右值引用来匹配临时值的，那么，普通的左值是否也能借助移动语义来优化性能呢，那该怎么做呢？事实上C++11为了解决这个问题，提供了std::move方法来将左值转换为右值，从而方便应用移动语义。move是将对象资源的所有权从一个对象转移到另一个对象，只是转移，没有内存的拷贝，这就是所谓的move语义。如图1-1所示是深拷贝和move的区别。<br><img src="https://img-blog.csdnimg.cn/20200220111804414.png" alt="在这里插入图片描述"></p><p>图1-1 深拷贝和move的区别</p><p>　　再看看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    std::list&lt; std::string&gt; tokens;</span><br><span class="line">    &#x2F;&#x2F;省略初始化...</span><br><span class="line">    std::list&lt; std::string&gt; t &#x3D; tokens; &#x2F;&#x2F;这里存在拷贝 </span><br><span class="line">&#125;</span><br><span class="line">std::list&lt; std::string&gt; tokens;</span><br><span class="line">std::list&lt; std::string&gt; t &#x3D; std::move(tokens);  &#x2F;&#x2F;这里没有拷贝</span><br></pre></td></tr></table></figure><p>　　如果不用std::move，拷贝的代价很大，性能较低。使用move几乎没有任何代价，只是转换了资源的所有权。他实际上将左值变成右值引用，然后应用移动语义，调用移动构造函数，就避免了拷贝，提高了程序性能。如果一个对象内部有较大的对内存或者动态数组时，很有必要写move语义的拷贝构造函数和赋值函数，避免无谓的深拷贝，以提高性能。事实上，C++11中所有的容器都实现了移动语义，方便我们做性能优化。</p><p>　　这里也要注意对move语义的误解，move实际上它并不能移动任何东西，它唯一的功能是将一个左值强制转换为一个右值引用。如果是一些基本类型比如int和char[10]定长数组等类型，使用move的话仍然会发生拷贝（因为没有对应的移动构造函数）。所以，move对于含资源（堆内存或句柄）的对象来说更有意义。</p><h2 id="第4行代码故事"><a href="#第4行代码故事" class="headerlink" title="第4行代码故事"></a>第4行代码故事</h2><p>template <typename T>void f(T&amp;&amp; val){ foo(std::forward<T>(val)); }<br>　　C++11之前调用模板函数时，存在一个比较头疼的问题，如何正确的传递参数。比如： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line">void forwardValue(T&amp; val)</span><br><span class="line">&#123;</span><br><span class="line">    processValue(val); &#x2F;&#x2F;右值参数会变成左值 </span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void forwardValue(const T&amp; val)</span><br><span class="line">&#123;</span><br><span class="line">    processValue(val); &#x2F;&#x2F;参数都变成常量左值引用了 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都不能按照参数的本来的类型进行转发。</p><p>　　C++11引入了完美转发：在函数模板中，完全依照模板的参数的类型（即保持参数的左值、右值特征），将参数传递给函数模板中调用的另外一个函数。C++11中的std::forward正是做这个事情的，他会按照参数的实际类型进行转发。看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void processValue(int&amp; a)&#123; cout &lt;&lt; &quot;lvalue&quot; &lt;&lt; endl; &#125;</span><br><span class="line">void processValue(int&amp;&amp; a)&#123; cout &lt;&lt; &quot;rvalue&quot; &lt;&lt; endl; &#125;</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void forwardValue(T&amp;&amp; val)</span><br><span class="line">&#123;</span><br><span class="line">    processValue(std::forward&lt;T&gt;(val)); &#x2F;&#x2F;照参数本来的类型进行转发。</span><br><span class="line">&#125;</span><br><span class="line">void Testdelcl()</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    forwardValue(i); &#x2F;&#x2F;传入左值 </span><br><span class="line">    forwardValue(0);&#x2F;&#x2F;传入右值 </span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">lvaue </span><br><span class="line">rvalue</span><br></pre></td></tr></table></figure><p>　　右值引用T&amp;&amp;是一个universal references，可以接受左值或者右值，正是这个特性让他适合作为一个参数的路由，然后再通过std::forward按照参数的实际类型去匹配对应的重载函数，最终实现完美转发。</p><p>　　我们可以结合完美转发和移动语义来实现一个泛型的工厂函数，这个工厂函数可以创建所有类型的对象。具体实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename…  Args&gt;</span><br><span class="line">T* Instance(Args&amp;&amp;… args)</span><br><span class="line">&#123;</span><br><span class="line">    return new T(std::forward&lt;Args &gt;(args)…);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　这个工厂函数的参数是右值引用类型，内部使用std::forward按照参数的实际类型进行转发，如果参数的实际类型是右值，那么创建的时候会自动匹配移动构造，如果是左值则会匹配拷贝构造。</p><p>总结<br>　　通过4行代码我们知道了什么是右值和右值引用，以及右值引用的一些特点，利用这些特点我们才方便实现移动语义和完美转发。C++11正是通过引入右值引用来优化性能，具体来说是通过移动语义来避免无谓拷贝的问题，通过move语义来将临时生成的左值中的资源无代价的转移到另外一个对象中去，通过完美转发来解决不能按照参数实际类型来转发的问题（同时，完美转发获得的一个好处是可以实现移动语义）。</p><p>转载自：<a href="https://www.cnblogs.com/qicosmos/p/4283455.html" target="_blank" rel="noopener">https://www.cnblogs.com/qicosmos/p/4283455.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习随笔：C++ 对象模型和this指针</title>
      <link href="/2020/01/22/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9AC++%20%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%92%8Cthis%E6%8C%87%E9%92%88/"/>
      <url>/2020/01/22/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9AC++%20%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%92%8Cthis%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h2 id="在C-中，只有非静态成员变量才属于类的对象上"><a href="#在C-中，只有非静态成员变量才属于类的对象上" class="headerlink" title="在C++中，只有非静态成员变量才属于类的对象上"></a>在C++中，只有非静态成员变量才属于类的对象上</h2><p>成员变量和成员函数是分开存储的。<br>正如下面的例子，对象p只占用了4个字节。</p><p>#include <iostream></p><p>using namespace std;</p><p>class Person<br>{<br>public:<br>    int m_Age;<br>    static int b;<br>    void func() {}<br>    static void funcc(){}<br>};</p><p>void test01() {<br>    Person p;<br>    cout &lt;&lt; “p占用空间” &lt;&lt; sizeof(p) &lt;&lt; endl;  // p占用空间4，即只有m_Age的大小才算在了类对象占用的空间上<br>}</p><p>int main()<br>{<br>    test01();<br>    return 0;<br>}</p><p>注：空类时，类对象占用1个字节</p><h2 id="this-指针"><a href="#this-指针" class="headerlink" title="this 指针"></a>this 指针</h2><p>由上可知，成员变量和成员函数分开存储的，每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会公用一份代码，那这一块代码是如何区分哪一个对象调用自己的呢？<br>C++中通过自动提供特殊的对象指针：this指针，来解决这个问题。<br>this指针是隐含在每一个非静态成员函数内的一种指针，不用自己定义，可直接使用。取上面那个例子来讲，一个对象的this指针相当于 Person * const this;<br>那this指针有什么用途呢？<br>1、当形参和成员变量同名时，可用this指针来区分。<br>2、在类的非静态成员函数中返回对象本身，可使用return *this ，这个也是实现链式编程的一个方式。</p><h3 id="解决名称冲突"><a href="#解决名称冲突" class="headerlink" title="解决名称冲突"></a>解决名称冲突</h3><p>例如在构造函数中发生冲突：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">int m_Age &#x3D;10;</span><br><span class="line">public:</span><br><span class="line">Person() &#x3D; default;</span><br><span class="line">Person(int age):m_Age(age)&#123;&#125;</span><br><span class="line">Person(int m_Age) &#123;</span><br><span class="line">&#x2F;&#x2F;m_Age &#x3D; m_Age; &#x2F;&#x2F; 这个构造函数是不能初始化m_Age的。这时候需要用this指针来指明该左值其实是我的成员变量</span><br><span class="line">this-&gt;m_Age &#x3D;  m_Age;&#x2F;&#x2F;这样才能初始化。</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>this指针指向被调用的成员函数所属的对象。所以this-&gt;age就知道是属于哪个对象的成员变量了。</p><h3 id="返回对象本身用-this"><a href="#返回对象本身用-this" class="headerlink" title="返回对象本身用*this"></a>返回对象本身用*this</h3><p>注意的是，以值方式和以引用方式返回这两者是有区别的。</p><h4 id="以值方式返回"><a href="#以值方式返回" class="headerlink" title="以值方式返回"></a>以值方式返回</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">int m_Age &#x3D; 10;</span><br><span class="line">mutable int m_height &#x3D; 160;</span><br><span class="line">public:</span><br><span class="line">Person() &#x3D; default;</span><br><span class="line">Person(int age):m_Age(age)&#123;&#125;</span><br><span class="line">void ff() const&#123;</span><br><span class="line">m_height &#x3D; 180;</span><br><span class="line">&#125;</span><br><span class="line">void gg() &#123;</span><br><span class="line">m_Age &#x3D; 19;</span><br><span class="line">&#125;</span><br><span class="line">Person PersonAddAge(Person &amp;p) &#123;</span><br><span class="line">this-&gt;m_Age +&#x3D; p.m_Age;</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Person p;</span><br><span class="line">Person p1;</span><br><span class="line">const Person pp;</span><br><span class="line">pp.m_height &#x3D; 199;</span><br><span class="line">p.PersonAddAge(p1).PersonAddAge(p1).PersonAddAge(p1); </span><br><span class="line">cout &lt;&lt; &quot;p的年龄：&quot; &lt;&lt; p.m_Age &lt;&lt; endl;&#x2F;&#x2F;20</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以类对象的值的方式返回时，用拷贝构造函数创建了一个临时对象(假如是p’)，实际上返回的是一个临时对象p’那这个链式编程其实等于先实现p2.PersonAddAge(p1)，然后实现p’.PersonAddAge(p1),再实现p’’.PersonAddAge(p1)；所以输出p2.age时只有20</p><h4 id="以引用的方式返回"><a href="#以引用的方式返回" class="headerlink" title="以引用的方式返回"></a>以引用的方式返回</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person&amp; PersonAddAge(Person &amp;p) &#123;</span><br><span class="line">this-&gt;m_Age +&#x3D; p.m_Age;</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回一个引用，引用的是自身，所以<code>p.PersonAddAge(p1).PersonAddAge(p1).PersonAddAge(p1); 实现了想要的效果，    cout &lt;&lt; &quot;p的年龄：&quot; &lt;&lt; p.m_Age &lt;&lt; endl; 得到40</code></p><h2 id="空指针访问成员函数"><a href="#空指针访问成员函数" class="headerlink" title="空指针访问成员函数"></a>空指针访问成员函数</h2><p>C++中空指针也可以调用成员函数的，但是要注意有没有用到this指针，如果用到了，就要加if判断是否为空，以保证代码的健壮性。<br>举例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">int m_Age &#x3D; 10;</span><br><span class="line">public:</span><br><span class="line">Person() &#x3D; default;</span><br><span class="line">Person(int age) :m_Age(age) &#123;&#125;</span><br><span class="line">void ff() &#123;</span><br><span class="line">&#x2F;&#x2F;报错原因是传入的指针是NULL</span><br><span class="line">cout &lt;&lt; &quot;age&#x3D; &quot; &lt;&lt; m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void gg() &#123;</span><br><span class="line">cout &lt;&lt; &quot;hello&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Person* p &#x3D; NULL;</span><br><span class="line">&#x2F;&#x2F;p-&gt;ff();  &#x2F;&#x2F;出错，因为调用了的成员函数里面需要用到this指针，而p是空指针，它没指向任何对象</span><br><span class="line">p-&gt;gg(); &#x2F;&#x2F;可运行，因为调用的成员函数不需要知道是哪个对象调用它就能执行了。</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;一般为了保证代码的健壮性，防止空指针访问成员函数导致出错，可在成员函数中加一个判断是否为空的条件</span><br><span class="line">如 ：if(this &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const修饰成员函数"><a href="#const修饰成员函数" class="headerlink" title="const修饰成员函数"></a>const修饰成员函数</h2><p>常函数：<br>1、成员函数后加const，称这个函数为成员函数<br>2、常函数不可以修改成员属性<br>3、成员属性声明时加关键字mutable，在常函数中依然可以修改<br>常对象：<br>1、声明对象前加const称该对象为常对象<br>2、常对象只能调用常函数</p><p>举例与解释见代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">int m_Age &#x3D; 10;</span><br><span class="line">mutable int m_height &#x3D; 160;&#x2F;&#x2F;关键字mutable声明后是特殊变量，即使在常函数中也可以修改该属性</span><br><span class="line">public:</span><br><span class="line">Person() &#x3D; default;</span><br><span class="line">Person(int age) :m_Age(age) &#123;&#125;</span><br><span class="line">&#x2F;&#x2F;常函数，不能修改成员属性，如m_Age &#x3D; 18</span><br><span class="line">&#x2F;&#x2F;由于每个成员函数都隐含了一个this指针，m_Age &#x3D; 18相当于this-&gt;m_Age &#x3D; 18</span><br><span class="line">&#x2F;&#x2F;this指针的本质是指针常量，即指针的指向不能修改。</span><br><span class="line">&#x2F;&#x2F;例如不能使this &#x3D; NULL;</span><br><span class="line">&#x2F;&#x2F;此例中this相当于 Person * const this；在函数后加const，相当于const Person * const this；</span><br><span class="line">&#x2F;&#x2F;也就是说在成员函数后加const，修饰的是this指针，所以不可以在常函数中修改指针指向的值。</span><br><span class="line">void ff() const &#123;</span><br><span class="line">m_height &#x3D; 180;</span><br><span class="line">&#125;</span><br><span class="line">void gg() &#123;</span><br><span class="line">m_Age &#x3D; 19;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Person p;</span><br><span class="line">const Person pp;&#x2F;&#x2F;在对象前加const，变为常对象。pp的属性也不可以修改.</span><br><span class="line">&#x2F;&#x2F;p.m_Age &#x3D; 100;err,不可修改。</span><br><span class="line">pp.m_height &#x3D; 199;&#x2F;&#x2F;可修改。在常对象下也可修改。</span><br><span class="line">&#x2F;&#x2F;为什么常对象只能调用常函数呢？</span><br><span class="line">&#x2F;&#x2F;因为如果可以调用普通成员函数，那在该函数下修改成员属性，那声明为常对象也就没意义了。</span><br><span class="line">&#x2F;&#x2F;pp.gg(); err</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习随笔：深拷贝与浅拷贝</title>
      <link href="/2020/01/21/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/01/21/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p>在看以前的笔记时发现关于浅拷贝与深拷贝的知识点整理的有点模糊。所以把内容重新整理一下。</p><p>简单来说，<br>浅拷贝（位拷贝）：简单的赋值拷贝操作。类中的合成拷贝构造函数就是浅拷贝。<br>深拷贝：在堆区重新申请空间，进行拷贝操作。</p><p>先说总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来问题。如，若用合成拷贝构造函数来进行拷贝初始化，则在调用析构函数释放自身在堆区开辟的内存空间时，会导致堆区内存被重复释放，致使程序崩溃。</p><p>现用一段示例代码进一步说明该结论：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Person() &#123;</span><br><span class="line">cout &lt;&lt; &quot;Person默认构造函数调用&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">Person(int age, int height) &#123;</span><br><span class="line">m_Age &#x3D; age;</span><br><span class="line">m_Height &#x3D; new int(height);</span><br><span class="line">cout &lt;&lt; &quot;Person有参构造函数调用&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;自己实现拷贝构造函数，解决浅拷贝带来的问题</span><br><span class="line">Person(const Person&amp; p) &#123;</span><br><span class="line">m_Age &#x3D; p.m_Age;</span><br><span class="line">cout &lt;&lt; &quot;Person拷贝构造函数调用&quot; &lt;&lt; endl;</span><br><span class="line">&#x2F;&#x2F;m_Height &#x3D;p.m_Height;编译器默认实现就是这行代码；</span><br><span class="line">&#x2F;&#x2F;深拷贝操作</span><br><span class="line">m_Height &#x3D; new int(*p.m_Height);  </span><br><span class="line">&#125;</span><br><span class="line">~Person() &#123;</span><br><span class="line">&#x2F;&#x2F;析构代码，将堆区开辟数据做释放操作</span><br><span class="line">cout &lt;&lt; &quot;Person析构函数调用&quot; &lt;&lt; endl;</span><br><span class="line">if (m_Height !&#x3D; NULL) &#123;</span><br><span class="line">delete m_Height;</span><br><span class="line">&#x2F;&#x2F;避免出现野指针，将其置空。</span><br><span class="line">m_Height &#x3D; NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public:</span><br><span class="line">int m_Age &#x3D; 10;</span><br><span class="line">int * m_Height &#x3D;NULL;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void test01() &#123;</span><br><span class="line">Person p1(16,170);</span><br><span class="line">cout &lt;&lt; &quot;p1的年龄为：&quot; &lt;&lt; p1.m_Age &lt;&lt;&quot;  p1的身高为：&quot;&lt;&lt;*p1.m_Height&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">Person p2(p1);</span><br><span class="line">cout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; p2.m_Age &lt;&lt;&quot;  p2的身高为：&quot;&lt;&lt;*p2.m_Height&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再用两张图来进一步说明：<br>第一张是使用合成拷贝构造函数：注意两个指针指向同一堆空间<br><img src="https://img-blog.csdnimg.cn/20200121031500747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU1Mjc0NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">要解决这个问题，自己创建一个拷贝构造函数，在堆区重新申请一块内存，存放相同的数据m_Height，此时p1和p2的m_Height指向的内存空间已经不一样了。<br><img src="https://img-blog.csdnimg.cn/20200121031603463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU1Mjc0NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习随笔：C++的四种强制类型转换符</title>
      <link href="/2020/01/15/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9AC++%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%AC%A6/"/>
      <url>/2020/01/15/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9AC++%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>C++的强制类型转换对类型转换做了细分，提供了四种不同类型转换，以支持不同需求的转换；类型转换有了统一的标示符，利于代码排查和检视。这四种类型转换是：static_case(静态转换)、dynamic_cast(动态转换)、const_cast(常量转换)和reinterpret_cast(不相关类型的转换)。<br>下面分别来介绍这四种转换：static_cast、dynamic_cast、const_cast、reinterpret_cast，它们都是类模板。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式均为：xx_cast&lt;type-id&gt;(expression) ，其中type-id-要转换成什么类型，expression-被转换类型的目标变量</span><br></pre></td></tr></table></figure><h1 id="static-case和dynamic-cast"><a href="#static-case和dynamic-cast" class="headerlink" title="static_case和dynamic_cast"></a>static_case和dynamic_cast</h1><h2 id="类的继承关系图"><a href="#类的继承关系图" class="headerlink" title="类的继承关系图"></a>类的继承关系图</h2><p><img src="https://img-blog.csdnimg.cn/20200115120248531.png" alt="在这里插入图片描述"><br>从图中可知，派生类不仅会继承基类中可继承的方法和属性，还有自身的方法和属性。<br>当我们从派生类向基类转换时，也就是上行转换，static_case和dynamic_cast这两种方法都是能安全转换的。但是当向下转换类型，也就是我们从基类向派生类转换，当我们采用传统的C语言和c++转换时，就会出现意想不到的情况，因为转换后派生类自己的方法和属性丢失了，一旦我们去调用派生类的方法和属性那就糟糕了，而dynamic_cast这种强制转换内部提供了安全的转换，解决了这种问题。其内部实现可参考<a href="https://blog.csdn.net/passion_wu128/article/details/38511957" target="_blank" rel="noopener">passion_wu128</a> 的这篇博客。<br>以下则主要讲static_case和dynamic_cast的用法和特点。</p><h2 id="static-case"><a href="#static-case" class="headerlink" title="static_case"></a>static_case</h2><p>（1）使用场景</p><p>   1 在基本数据类型之间转换，如把 int 转换为 char，这种带来安全性问题由程序员来保证； </p><p>   2 把空指针转换成目标类型的空指针。 </p><p>   3 用于类层次结构中基类和派生类之间指针或引用的转换。<br>        上行转换（派生类—-&gt;基类）是安全的；<br>        下行转换（基类—-&gt;派生类）由于没有动态类型检查，所以是不安全的。<br>   4 把任何类型的表达式转换成void类型</p><pre><code>注意：static_cast不能转换掉expression的const、volatile、或者__unaligned属性</code></pre><p>（2）使用特点</p><p>   主要执行非多态的转换操作，用于代替C中通常的转换操作。<br>    隐式转换都建议使用 static_cast 进行标明和替换。<br>    不能使用 static_cast 在有类型指针内转换。</p><p>类上行和下行转换举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Base</span><br><span class="line">&#123;&#125;;</span><br><span class="line"></span><br><span class="line">class Derived : public Base</span><br><span class="line">&#123;&#125;；</span><br><span class="line"></span><br><span class="line">Base* pB &#x3D; new Base();</span><br><span class="line">&#x2F;&#x2F;用static_cast的下行转换，不安全</span><br><span class="line">if(Derived* pD &#x3D; static_cast&lt;Derived*&gt;(pB))&#123;&#125;</span><br><span class="line"></span><br><span class="line">Derived* pD &#x3D; new Derived();</span><br><span class="line">&#x2F;&#x2F;上行转换，安全</span><br><span class="line">if(Base* pB &#x3D; static_cast&lt;Base*&gt;(pD))&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h2><p>（1）使用场景</p><p>   主要用于将一个父类的指针/引用转化为子类的指针/引用（下行转换）。<br>    注：由于这个dynamic_cast要耗费重大的运行成本，应避免频繁使用。</p><p>（2）使用特点</p><p> 1 基类必须要有虚函数，因为 dynamic_cast 是运行时类型检查，需要运行时类型信息，而这个信息是存储在类的虚函数表中。<br>  2 对于下行转换，dynamic_cast 是安全的（当类型不一致时，转换过来的是空指针），而 static_cast 是不安全的。<br>  3 对指针进行 dynamic_cast，失败返回 NULL，成功返回正常 cast 后的对象指针；对引用进行 dynamic_cast，失败抛出一个异常，成功返回正常 cast 后的对象引用。</p><p>（3）转换方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dynamic_cast&lt; type* &gt;(e)&#x2F;&#x2F;type必须是一个类类型且必须是一个有效的指针</span><br><span class="line">dynamic_cast&lt; type&amp; &gt;(e)&#x2F;&#x2F;type必须是一个类类型且必须是一个左值</span><br><span class="line">dynamic_cast&lt; type&amp;&amp; &gt;(e)&#x2F;&#x2F;type必须是一个类类型且必须是一个右值</span><br></pre></td></tr></table></figure><p>e的类型必须符合以下三个条件中的任何一个：<br>1、e的类型是目标类型type的公有派生类<br>2、e的类型是目标type的共有基类<br>3、e的类型就是目标type的类型。</p><p>如果一条dynamic_cast语句的转换目标是指针类型并且失败了，则结果为0。如果转换目标是引用类型并且失败了，则dynamic_cast运算符将抛出一个std::bad_cast异常(该异常定义在typeinfo标准库头文件中)。e也可以是一个空指针，结果是所需类型的空指针。</p><p>dynamic_cast主要用于类层次间的上行转换和下行转换，还可以用于类之间的交叉转换（cross cast）。</p><p>在类层次间进行上行转换时，dynamic_cast和static_cast的效果是一样的；在进行下行转换时，dynamic_cast具有类型检查的功能，比static_cast更安全。</p><p>代码举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class CBase    &#x2F;&#x2F; 基类(父类)</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    &#x2F;&#x2F; dynamic_cast在将父类cast到子类时，父类必须要有虚函数</span><br><span class="line">    virtual int test() &#123; return 0; &#125; &#x2F;&#x2F; 一定要是 virtual</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class CDerived : public CBase  &#x2F;&#x2F; 派生类(子类)</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int test() &#123; return 1; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    CBase *p_CBase &#x3D; new CBase;  &#x2F;&#x2F; 基类对象指针</span><br><span class="line">    CDerived *p_CDerived &#x3D; dynamic_cast&lt;CDerived *&gt;(p_CBase);  &#x2F;&#x2F; 将基类对象指针类型转换为派生类对象指针</span><br><span class="line"></span><br><span class="line">    CBase i_CBase;    &#x2F;&#x2F; 创建基类对象</span><br><span class="line">    CBase &amp;r_CBase &#x3D; i_CBase;    &#x2F;&#x2F; 基类对象的引用</span><br><span class="line">    CDerived &amp;r_CDerived &#x3D; dynamic_cast&lt;CDerived &amp;&gt;(r_CBase);  &#x2F;&#x2F; 将基类对象的引用转换派生类对象的引用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h1><p>表达式const_cast&lt;T<em>&gt;(a)被用于从一个类中去除以下这些属性：const, volatile, 和 __unaligned。其中T和a必须是相同的类型。<br>class A { };<br>void f()<br>{<br>    const A *pa = new A;//const对象<br>    A *pb;//非const对象<br>    //pb = pa; // 这里将出错，不能将const对象指针赋值给非const对象<br>    pb = const_cast&lt;A</em>&gt;(pa); // 现在OK了<br>    …<br>}<br>对于本身定义时为const的类型，即使你去掉const性，在你操作这片内容时候也要小心，只能读不能写操作，否则还是会出错。<br>const_cast操作不能在不同的种类间转换。相反，它仅仅把一个它作用的表达式转换成常量。它可以使一个本来不是const类型的数据转换成const类型的，或者把const属性去掉。</p><h1 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h1><p>reinterpret_cast运算符是用来处理无关类型之间的转换；它会产生一个新的值，这个值会有与原始参数（expressoin）有完全相同的比特位。</p><p>static_cast 和 reinterpret_cast 的用法和区别： static_cast 运算符完成<strong>相关类型</strong>之间的转换. 而 reinterpret_cast 处理<strong>互不相关</strong>的类型之间的转换.</p><p>所谓”相关类型”指的是从逻辑上来说,多多少少还有那么一点联系的类型,比如从 double 到 int,我们知道它们之间还是有联系的,只是精度差异而已,使用 static_cast 就是告诉编译器:我知道会引起精度损失,但是我不在乎. 又如从 void* 到 具体类型指针像 char<em>,从语义上我们知道 void</em> 可以是任意类型的指针,当然也有可能是 char* 型的指针,这就是所谓的”多多少少还有那么一点联系”的意思. 又如从派生类层次中的上行转换(即从派生类指针到基类指针,因为是安全的,所以可以用隐式类型转换)或者下行转换(不安全,应该用 dynamic_cast 代替).对于static_cast操作符,如果需要截断,补齐或者指针偏移编译器都会自动完成.注意这一点,是和 reinterpret_cast 的一个根本区别.reinterpret_cast做转换时编译器不会做任何检查,截断,补齐的操作,只是把比特位拷贝过去.所以 reinterpret_cast 常常被用作不同类型指针间的相互转换,因为所有类型的指针的长度都是一致的,按比特位拷贝后不会损失数据.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习随笔：继承、多态与虚函数</title>
      <link href="/2020/01/14/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E7%BB%A7%E6%89%BF%E3%80%81%E5%A4%9A%E6%80%81%E4%B8%8E%E8%99%9A%E5%87%BD%E6%95%B0/"/>
      <url>/2020/01/14/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E7%BB%A7%E6%89%BF%E3%80%81%E5%A4%9A%E6%80%81%E4%B8%8E%E8%99%9A%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>继承：所谓继承，是指在一个已存在类的基础上建立一个新类。通过继承联系在一起的类构成一种层次关系。已存在的类称为基类(base class)，新建立的类称为派生类(derived class)；也就是说在层次关系的根部的称为基类，从基类直接或者间接继承而来的类称为派生类。基类负责定义在层次关系中所有类的共性，即共同拥有的成员，而派生类定义了自身独有的成员。</p><p>虚函数：对于某些成员函数，基类希望它的派生类能各自定义自己的功能，就可在基类中将该函数声明为虚函数（在函数名前加virtual ）如 <code>virtual int f(int a) const {};</code></p><p>多态：顾名思义，多态就是“多种形态”的意思。它是面向对象程序设计的一个重要特征。在面向对象方法中一般是这样表述多态性的：同样的消息被不同类型的对象接收时导致的不同行为。所谓消息是指对类的成员函数的调用，不同行为是指不同的实现，也就是调用了不同的函数。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>1、继承方式有三种，即：public(公有继承)、private(私有继承)、protected(保护继承)，如果省略，则默认为private继承方式；<br>2、多重继承方式下，各基类之间要用逗号分开，每一个基类都有自己的继承方式，它们互不影响；<br>3、派生类只要写出其新增成员的声明或定义即可，基类的内容不必重复。<br>4、访问控制：某个类对其继承而来的成员的访问权限收到两个因素影响：一是在基类中该成员的访问说明符；二是在派生类的派生列表中的访问说明符。<br>派生访问说明符对于派生类的成员能否访问其直接基类的成员没什么影响。对基类成员的访问权限只与基类中的访问说明符有关。详细的访问关系如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">基类中      继承方式            子类中</span><br><span class="line"></span><br><span class="line">public     ＆ public继承        &#x3D;&gt; public</span><br><span class="line"></span><br><span class="line">public     ＆ protected继承     &#x3D;&gt; protected   </span><br><span class="line"></span><br><span class="line">public     ＆ private继承       &#x3D;&gt; private</span><br><span class="line"></span><br><span class="line">protected  ＆ public继承        &#x3D;&gt; protected</span><br><span class="line"></span><br><span class="line">protected  ＆ protected继承     &#x3D;&gt; protected   </span><br><span class="line"></span><br><span class="line">protected  ＆ private继承       &#x3D;&gt; private</span><br><span class="line"></span><br><span class="line">private    ＆ public继承        &#x3D;&gt; 子类无权访问</span><br><span class="line"></span><br><span class="line">private    ＆ protected继承     &#x3D;&gt; 子类无权访问</span><br><span class="line"></span><br><span class="line">private    ＆ private继承       &#x3D;&gt; 子类无权访问</span><br></pre></td></tr></table></figure><h3 id="单一继承下的构造函数与析构函数"><a href="#单一继承下的构造函数与析构函数" class="headerlink" title="单一继承下的构造函数与析构函数"></a>单一继承下的构造函数与析构函数</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>构造函数不能是虚函数。对于基类的构造函数，它仅仅是在派生类构造函数中被调用，这种机制不同于继承。也就是说，派生类不继承基类的构造函数，将构造函数声明为虚函数没有什么意义。<br>构造函数初始化数据成员的顺序：先调用基类的构造函数初始化其数据成员，再调用派生类的构造函数初始化其数据成员。<br>派生类构造函数的定义格式：<br>派生类构造函数(总参数表) :基类1构造函数(形参,形参,…), 派生类新增数据成员1(形参),派生类新增数据成员2(形参){};<br>如Q是基类，数据成员有bookno，price，B是其派生类，新增了数据成员money。B的构造函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B(const string&amp; a, double b,double c):Q(a ,b),money( c)&#123;&#125;;</span><br></pre></td></tr></table></figure><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><p>1、派生类与基类的析构函数没有什么联系，彼此独立，派生类或基类的析构函数只做各自类对象消亡前的清理工作;<br>2、在派生过程中，基类的析构函数不能继承，如果需要析构函数的话，就要在派生类中重新定义;<br>3、派生类析构函数的定义方法与没有继承关系的类中析构函数的定义方法完全相同，只要在函数体中负责把派生类新增的非对象成员的清理工作做好就够了，系统会自己调用基类及子对象的析构函数来对基类及子对象进行清理。<br>析构函数的执行顺序:<br>a、与构造函数的执行顺序正好相反<br>b、先析构派生类自己；<br>c、再析构各个子对象：如果有多个子对象，析构顺序与这些子对象在类中的说明次序相反；<br>d、最后才是析构基类。</p><p>虚构析函数的格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">虚析构函数的声明格式 :</span><br><span class="line">virtual ~类名()</span><br><span class="line">&#123;</span><br><span class="line">函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用虚构析函数的原因：<br>用new命令建立派生类对象时返回的是派生类指针，根据赋值兼容规则，可以把派生类指针赋给基类指针。当用delete 基类指针 来删除派生类对象时，只调用基类的析构函数, 不能释放派生类对象自身占有的内存空间。这一问题在引进虚析构函数后能够得到解决。</p><p>虚析构函数与一般虚函数的不同之处 :<br>当基类的析构函数被声明为虚函数时，它的派生类的析构函数也自动成为虚函数，这些析构函数不要求同名;<br>一个虚析构函数的版本被调用执行后，接着就要调用执行基类版本，依此类推，直到执行到派生序列的最开始的那个析构函数的版本为止，也即说派生类析构函数、基类析构函数能够依次被执行。</p><p>何时需要虚析构函数？<br>通过基类指针删除派生类对象时；<br>通过基类指针调用对象的析构函数。</p><h2 id="虚函数与多态"><a href="#虚函数与多态" class="headerlink" title="虚函数与多态"></a>虚函数与多态</h2><p>当我们使用基类的引用或者指针调用一个虚成员函数时会执行动态绑定。因为我们直到运行时才能知道到底调用了哪个版本的虚函数，所以所有虚函数都必须有定义。通常情况下如果我们不使用某个函数，则无需为该函数提供定义。但是我们必须为每个虚函数都提供定义，而不管是否被用到了，这是因为连编译器也无法确定到底会使用哪个虚函数。<br>有关动态绑定的理解（转自<a href="https://blog.csdn.net/chgaowei/article/details/6427731" target="_blank" rel="noopener">常高伟</a>）：<br><strong>为了支持c++的多态性，才用了动态绑定和静态绑定。</strong><br>需要理解的四个名词：<br>1、对象的静态类型：对象在声明时采用的类型。是在编译期确定的。<br>2、对象的动态类型：目前所指对象的类型。是在运行期决定的。<br>对象的动态类型可以更改，但是静态类型无法更改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class B</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">class C : public B</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">class D : public B</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">D* pD &#x3D; new D();&#x2F;&#x2F;pD的静态类型是它声明的类型D*，动态类型也是D*</span><br><span class="line">B* pB &#x3D; pD;&#x2F;&#x2F;pB的静态类型是它声明的类型B*，动态类型是pB所指向的对象pD的类型D*</span><br><span class="line">C* pC &#x3D; new C();</span><br><span class="line">pB &#x3D; pC;&#x2F;&#x2F;pB的动态类型是可以更改的，现在它的动态类型是C*</span><br></pre></td></tr></table></figure><p>3、静态绑定：绑定的是对象的静态类型，某特性（比如函数）依赖于对象的静态类型，发生在编译期。<br>4、动态绑定：绑定的是对象的动态类型，某特性（比如函数）依赖于对象的动态类型，发生在运行期。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class B</span><br><span class="line">&#123;</span><br><span class="line">    void DoSomething();</span><br><span class="line">    virtual void vfun();</span><br><span class="line">&#125;</span><br><span class="line">class C : public B</span><br><span class="line">&#123;</span><br><span class="line">    void DoSomething();&#x2F;&#x2F;首先说明一下，这个子类重新定义了父类的no-virtual函数，这是一个不好的设计，会导致名称遮掩；这里只是为了说明动态绑定和静态绑定才这样使用。</span><br><span class="line">    virtual void vfun();</span><br><span class="line">&#125;</span><br><span class="line">class D : public B</span><br><span class="line">&#123;</span><br><span class="line">    void DoSomething();</span><br><span class="line">    virtual void vfun();</span><br><span class="line">&#125;</span><br><span class="line">D* pD &#x3D; new D();</span><br><span class="line">B* pB &#x3D; pD;</span><br></pre></td></tr></table></figure><p>让我们看一下，pD-&gt;DoSomething()和pB-&gt;DoSomething()调用的是同一个函数吗？<br>不是的，虽然pD和pB都指向同一个对象。因为函数DoSomething是一个no-virtual函数，它是静态绑定的，也就是编译器会在编译期根据对象的静态类型来选择函数。pD的静态类型是D<em>，那么编译器在处理pD-&gt;DoSomething()的时候会将它指向D::DoSomething()。同理，pB的静态类型是B</em>，那pB-&gt;DoSomething()调用的就是B::DoSomething()。</p><p>让我们再来看一下，pD-&gt;vfun()和pB-&gt;vfun()调用的是同一个函数吗？<br>是的。因为vfun是一个虚函数，它动态绑定的，也就是说它绑定的是对象的动态类型，pB和pD虽然静态类型不同，但是他们同时指向一个对象，他们的动态类型是相同的，都是D*，所以，他们的调用的是同一个函数：D::vfun()。</p><p>上面都是针对对象指针的情况，对于引用（reference）的情况同样适用。</p><p>指针和引用的动态类型和静态类型可能会不一致，但是对象的动态类型和静态类型是一致的。<br>D.DoSomething()和D.vfun()永远调用的都是D::DoSomething()和D::vfun()。<br>至于那些事动态绑定，那些事静态绑定，有篇文章总结的非常好:<br>我总结了一句话：<strong>只有虚函数才使用的是动态绑定，其他的全部是静态绑定。</strong>目前我还没有发现不适用这句话的，如果有错误，希望你可以指出来。<br>特别需要注意的地方<br>当缺省参数和虚函数一起出现的时候情况有点复杂，极易出错。我们知道，虚函数是动态绑定的，但是为了执行效率，缺省参数是静态绑定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class B</span><br><span class="line">&#123;</span><br><span class="line"> virtual void vfun(int i &#x3D; 10);</span><br><span class="line">&#125;</span><br><span class="line">class D : public B</span><br><span class="line">&#123;</span><br><span class="line"> virtual void vfun(int i &#x3D; 20);</span><br><span class="line">&#125;</span><br><span class="line">D* pD &#x3D; new D();</span><br><span class="line">B* pB &#x3D; pD;</span><br><span class="line">pD-&gt;vfun();</span><br><span class="line">pB-&gt;vfun();</span><br></pre></td></tr></table></figure><p>有上面的分析可知pD-&gt;vfun()和pB-&gt;vfun()调用都是函数D::vfun()，但是他们的缺省参数是多少？<br>分析一下，缺省参数是静态绑定的，pD-&gt;vfun()时，pD的静态类型是D*，所以它的缺省参数应该是20；同理，pB-&gt;vfun()的缺省参数应该是10。编写代码验证了一下，正确。<br>对于这个特性，估计没有人会喜欢。所以，永远记住：<br>“绝不重新定义继承而来的缺省参数（Never redefine function’s inherited default parameters value.）”</p><p>多态的实现：</p><p>C++的多态性有两类：<br>1、静态多态性：也就是静态联编下实现的多态性，即是在程序编译时就能确定调用哪一个函数，函数重载和运算符重载实现的就是静态多态性；<br>2、动态多态性：也就是动态联编(虚函数)下实现的多态性，它只有在程序运行时才解决函数的调用问题，虚函数是实现动态多态性的基础<br>什么是联编 ?<br>又称为关联或绑定，是描述编译器决定在程序运行时，一个函数调用应执行哪段代码的一个术语，它把一个标识符与一个存储地址联系起来。</p><p><strong>虚函数</strong></p><p>声明格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">virtual 函数返回类型 函数名(形参表)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：<br>1、只有类的成员函数才能声明为虚函数，普通函数不存在继承关系，不能声明为虚函数；<br>2、virtual关键字出现在虚函数的声明处，在虚函数的类外定义时不加virtual；<br>3、静态成员函数不能声明为虚函数；<br>4、内联函数不能声明为虚函数；<br>5、构造函数也不能声明为虚函数，因为它是在对象产生之前运行的函数；<br>6、析构函数可以是虚函数而且通常声明为虚函数。</p><p>注：为什么要用指针-&gt;虚函数()方式而不是 对象.虚函数()方式来调用虚函数 ?<br>如果采用对象.虚函数()方式调用，只能得到一个个具体类的结果，不具备“跨类”功能。相反，指针则有“跨类”的能力，除此之外，引用也具备这种能力。</p><p><strong>虚基类</strong><br>如果一个派生类从多个基类中派生，而这些基类又有一个共同的基类，则在这个派生类将保留共同基类的多份副本。<br><img src="https://img-blog.csdnimg.cn/20200114141048547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU1Mjc0NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>要让派生类只保留共同基类的一份副本，可以让这个共同基类说明为虚基类。</p><p>虚基类的定义格式</p><p>格式： class 派生类 :virtual[继承方式] 基类名<br><img src="https://img-blog.csdnimg.cn/20200114141133851.png" alt="在这里插入图片描述"></p><p>虚基类及其派生类的构造函数和析构函数<br>构造函数<br>1）要求虚基类的构造函数只能调用一次。直接或间接继承虚基类的所有派生类，都必须在构造函数的成员初始化表中列出对虚基类的初始化。因此，要注意以下几点；<br>2）虚基类的构造函数在所有非虚基类之前调用；<br>3）若同一层次中包含多个虚基类，这些虚基类的构造函数按它们说明的次序调用；<br>4）若虚基类由非虚基派生而来，则先调用基类构造函数，再调用派生类的构造函数。<br>析构函数<br>调用顺序正好与它的构造函数调用顺序相反</p><p><strong>纯虚函数和抽象类</strong><br>纯虚函数</p><p>1)在某些情况下, 在基类中不能为虚函数提供具体定义, 这时可以把它说明为纯虚函数。它的定义留给派生类来完成。</p><p>2)纯虚函数的声明格式：<br>class 类名<br>{<br>    …<br>    virtual 返回类型 函数名(形参表) = 0；<br>    …<br>}<br>说明<br>1、纯虚函数没有也不允许有函数体，如果强行给它加上将会出现错误；<br>2、最后的“ = 0”并不表示函数的返回值为0，它只是形式上的作用，告诉编译系统“这是纯虚函数”；<br>3、是一个纯虚函数的声明语句，它的末尾应有分号；<br>4、纯虚函数的作用：在基类中为派生类保留一个虚函数的名字，以便派生类根据需要进行定义。如果在基类没有保留虚函数的名字，则无法实现多态性。<br>5、如果在一个类中声明了纯虚函数，而在其派生类中没有对该函数进行定义，则该虚函数在派生类中仍然为纯虚函数。</p><p>抽象类:</p><p>1.当一个类具有一个纯虚函数，这个类就是抽象类<br>2.抽象类不能实例化对象<br>3.子类继承抽象类，必须要实现纯虚函数，如果没有，子类也是抽象类<br>抽象类的作用：为了继承约束，根本不知道未来的实现<br>抽象类不能用作参数类型、函数返回类型或强制类型转换，但可以声明抽象类的指针或引用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习随笔：什么是套接字(Socket)？</title>
      <link href="/2020/01/12/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E5%A5%97%E6%8E%A5%E5%AD%97(Socket)%EF%BC%9F/"/>
      <url>/2020/01/12/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E5%A5%97%E6%8E%A5%E5%AD%97(Socket)%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>网络套接字又叫网际插座，在英文中是Internet Socket。在网络中，套接字扮演的角色正如插座一样，它是一个端点，可以与网络中的其它套接字建立连接。<br>套接字是一个位于网络中特定节点的服务所具有的标识符。套接字包含一个节点地址和一个端口号，用来标识这一服务。</p><p>在网络中，由IP地址可以唯一确定一台主机，但是准确来说，网络通讯中的双方并不是主机，而是运行在主机上的进程，这样就需要进一步确定是主机中的哪个进程要进行网络通讯。因此，除了IP地址之外，还需要端口号来唯一确定主机中的通讯进程。IP地址和端口号就构成了一个网络中的唯一标识符，即套接字。</p><p>套接字允许两个进程进行通讯，这两个进程可能运行在同一台机器上，也可能运行在不同的机器上。更准确地说，套接字是使用标准Unix文件描述符来与其它计算机进行通讯的一种方式。</p><p>在Unix操作系统中，每一个读写操作都是通过读写文件描述符来完成的。一个文件描述符就是一个与打开的文件相关联的整数，它可以是一个网络连接、一个文本文件、一个终端或其它东西。</p><h1 id="1-套接字的用途"><a href="#1-套接字的用途" class="headerlink" title="1  套接字的用途"></a>1  套接字的用途</h1><p>Socket被用于客户端/服务端应用框架中。服务端是一个针对客户端的请求执行某些特定操作的进程。大多数应用层协议如FTP、SMTP和POP3使用Socket来建立客户端与服务端之间的连接，从而进行数据的交换。</p><h1 id="2-套接字的类型"><a href="#2-套接字的类型" class="headerlink" title="2 套接字的类型"></a>2 套接字的类型</h1><p>常见的套接字类型有三种。前两种被广泛地使用，而后一种使用较少。<br>一般情况下假定进程间使用同种类型的socket进行通讯，但事实上不同类型的socket之间并没有通讯上的限制。</p><p>1.流套接字：提供面向连接、可靠的数据传输服务。该服务将保证数据能够实现无差错、无重复发送，并按顺序接收。如果你通过流套接字发送三个字符”A, B, C”，它们将会以同样的顺序到达——”A, B, C”，原因在于流套接字使用TCP（传输控制协议）进行数据传输。如果传输失败，发送方将会收到错误提示符。</p><p>2.数据包套接字：提供无连接服务。你无需像使用流套接字那样建立一个连接，而只需将目的地址信息一同打包后发送出去。该服务使用UDP（用户数据报协议）进行传输，延迟小且效率高，缺点是不能保证数据传输的可靠性。</p><p>3.原始套接字：允许用户对底层通讯协议进行访问。能够对底层的传输机制进行控制，因此可以用原始套接字来操纵网络层和传输层应用。原始套接字并不是给普通用户使用的，它们主要被用于开发新的通讯协议，或是用来获取已有通讯协议的一些隐蔽功能的访问权限。</p><h1 id="3-常用Socket-API函数的功能"><a href="#3-常用Socket-API函数的功能" class="headerlink" title="3 常用Socket API函数的功能"></a>3 常用Socket API函数的功能</h1><h2 id="1-socket"><a href="#1-socket" class="headerlink" title="1 socket"></a>1 socket</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Windows:#include &lt;WinSock2.h&gt;</span><br><span class="line">&#x2F;&#x2F; Linux:#include &lt;sys&#x2F;types.h&gt; &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">int socket(int domain, int type, int protocol);</span><br></pre></td></tr></table></figure><p>创建套接字时使用，操作系统会返回套接字描述符。最初是面向TCP/IP协议栈的，但最终设计成可以面向其他协议簇。<br>就如使用文件描述符来访问文件一样。程序是用套接字描述符来访问套接字。<br>接下来来详细介绍这三个参数<br>1.domain<br>就如写信一样,不同国家写信的地址写法不同，英国美国有从街-区-市的从小到大的地址写法！而中国的地址写法是从大到小，市-区-街。就如不同域有着不同地址表示格式。<br>常见的域是:AF_INET(IPV4域),AF_INET6(IPV6域),AF_UNIX,AF_UPSPEC…</p><p>2.type<br>有SOCK_DGRAM 固定长度的、无连接的、不可靠的报文传递。两个进程不需要建立连接只需要向对方进程套接字发送一个报文。（有点像写信，你发送信息就代表你写了很多信件。每封都有地址，接收人。）<br>有SOCK_STREAM 可靠的,有序的,双向的连接型字节流。（有点像，你建了一条管道到别人家，建好以后你不用去送信，只需不断往管道里投字条。对方也可以往管道里投纸条到你家。）<br>有SOCK_SEQPACKET（和SOCK_STREAM 类似只是从套接字得到的不是字节流而是基于报文的服务。）<br>有SOCK_RAM（用于访问下面的网络层即IP层。构造自己的协议头部。）</p><p>3.protocol<br>这个参数通常是0，在前2个参数已经确认的情况下一般用来选择默认的协议。比如在AF_INET SOCK_STREAM的情况下默认选择TCP<br>在AF_INET SOCK_DGREAM 的情况下默认选择UDP。<br>就像一个文件描述符一样。可以用read函数 write函数对文件描述符进行操作。同理可以对套接字描述符进行操作。<br>但是并不是所有的文件描述符操作都适用于套接字描述符。最常用的对套接字描述符的操作是shutdown<br>#include&lt;sys/socket.h&gt;<br>int shutdown(int sockfd,int how)<br>如果how是SHUT_RD 表示关闭读端无法再从套接字里读取<br>如果how是SHUT_WR 表示关闭写端无法再往套接字里写<br>how是SHUT_RDWR 说明同时无法写和读！<br>可以关闭一个方向开启另一个方向，比如关闭了写端但是还可以继续读取!</p><h2 id="2-closesocket-close"><a href="#2-closesocket-close" class="headerlink" title="2 closesocket/close"></a>2 closesocket/close</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int closesocket(SOCKET sd);    &#x2F;&#x2F; Windows:#include &lt;WinSock2.h&gt;</span><br><span class="line">int close(int fd);             &#x2F;&#x2F; Linux:#include &lt;unistd.h&gt;</span><br></pre></td></tr></table></figure><p>①关闭一个描述符为sd/fd的套接<br>②如果多个进程共享一个套接字，调用函数将套接字引用计数减1，减至0才关闭。<br>③一个进程中的多线程对一个套接字的使用无计数。如果进程中的一个线程调用函数将一个套接字关闭，该进程中的其他线程也将不能访问该套接字。<br>返回值：0-成功，SOCKET_ERROR(-1)-失败。</p><h2 id="3-listen"><a href="#3-listen" class="headerlink" title="3 listen"></a>3 listen</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Windows:#include &lt;WinSock2.h&gt;</span><br><span class="line">&#x2F;&#x2F; Linux:#include &lt;sys&#x2F;types.h&gt; &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">int listen(int sockfd, int backlog);</span><br></pre></td></tr></table></figure><p>监听状态函数，置服务器端的流套接字处于监听状态，仅服务器端调用，并且仅用于面向连接的流式套接字。<br>两个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int sockfd：服务器端的流套接字，仅用于面向连接的流式套接字。</span><br><span class="line">int backlog：设置连接请求队列大小，即缓存队列，可以设置连接客户端的最大连接个数</span><br><span class="line">当有多个客户端向服务器请求时，会受到此值的影响，默认值为20。</span><br></pre></td></tr></table></figure><p>返回值：0-成功，SOCKET_ERROR(-1)-失败。</p><h2 id="4-connect"><a href="#4-connect" class="headerlink" title="4 connect"></a>4 connect</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Windows:#include &lt;WinSock2.h&gt;</span><br><span class="line">&#x2F;&#x2F; Linux:#include &lt;sys&#x2F;types.h&gt; &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">int connect(int sockfd,const struct sockaddr *addr, socklen_t addrlen)</span><br></pre></td></tr></table></figure><p>客户端程序调用connect函数来使客户套接字与特定计算机的特定端口的套接字连接。<br>仅用于客户端， 可用于TCP客户端，也可用于UDP客户端。</p><pre><code>TCP客户端：建立TCP连接。UDP客户端：UDP是无连接的，功能只是指定服务器端点地址，实际是没有连接的，但看着像连接一样。</code></pre><p>三个参数：</p><pre><code>int sockfd：客户端套接字。const struct sockaddr *addr：服务端套接字地址。socklen_t addrlen：服务端套接字长度。</code></pre><h2 id="5-accept"><a href="#5-accept" class="headerlink" title="5 accept"></a>5 accept</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Windows:#include &lt;WinSock2.h&gt;</span><br><span class="line">&#x2F;&#x2F; Linux:#include &lt;sys&#x2F;types.h&gt; &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">int accept(int sockfd, struct sockaddr *cliaddr, socklen_t *addrlen)</span><br></pre></td></tr></table></figure><p>服务器端程序调用accept函数，从处于监听状态的流套接字的客户连接请求队列中取出排在最前的一个客户请求，并且创建一个新的套接字来与客户端套接字创建连接通道。<br>仅用于TCP套接字，仅用于服务器。<br>三个参数：</p><pre><code>int sockfd：服务端套接字。const struct sockaddr *addr：客户端套接字地址。socklen_t *addrlen：客户端套接字长度地址。</code></pre><p>如果使用主套接字与客户端通信，因为TCP是点对点连接，那么在某一时刻服务器就只能为一个客户端提供服务，而不能够实现并发的TCP服务器。因此创建新套接字与客户端通信，服务器通过多线程、多进程创建新套接字，即可实现并发的TCP服务器。</p><h2 id="6-send，sendto"><a href="#6-send，sendto" class="headerlink" title="6 send，sendto"></a>6 send，sendto</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Windows:#include &lt;WinSock2.h&gt;</span><br><span class="line">&#x2F;&#x2F; Linux:#include &lt;sys&#x2F;types.h&gt; &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">ssize_t send(int sockfd, const void *buf, size_t len, int flags);</span><br><span class="line">ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,</span><br><span class="line">                      const struct sockaddr *dest_addr, socklen_t addrlen);</span><br></pre></td></tr></table></figure><p>  ①send函数用于TCP套接字（客户端与服务器端）或调用了connect函数的UDP客户端套接字。<br>② sendto函数用于UDP服务器端套接字与未调用connect函数的UDP客户端套接字。</p><h2 id="7-recv-recvfrom"><a href="#7-recv-recvfrom" class="headerlink" title="7 recv, recvfrom"></a>7 recv, recvfrom</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Windows:#include &lt;WinSock2.h&gt;</span><br><span class="line">&#x2F;&#x2F; Linux:#include &lt;sys&#x2F;types.h&gt; &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">ssize_t recv(int sockfd, void *buf, size_t len, int flags);</span><br><span class="line">ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,</span><br><span class="line">                        struct sockaddr *src_addr, socklen_t *addrlen);</span><br></pre></td></tr></table></figure><p>①recv函数从TCP连接的另一端接收数据，或者从调用了connect函数的UDP客户端套接字接收服务器发来的数据。<br>②recvfrom用于从UDP服务器端套接字与未调用用connect函数的UDP客户端套接字接收对端数据。</p><h1 id="4-函数小结"><a href="#4-函数小结" class="headerlink" title="4 函数小结"></a>4 函数小结</h1><p>socket：创建套接字<br>connect：“连接”远端服务器（仅用于客户端，注意TCP与UDP的区别）<br>closesocket/close：释放/关闭套接字<br>listen：置服务器端TCP套接字为监听模式，并设置队列大小（仅用于服务器端TCP套接字）<br>accept：接收/提取一个连接请求，创建新套接字，通过新套接字与客户端进行连接（仅用于服务器端的TCP套接字，也称为阻塞函数）<br>recv：接收数据（用于TCP套接字或连接模式的客户端UDP套接字）<br>recvfrom：接收数据报（用于非连接模式的UDP套接字）<br>send：发送数据（用于TCP套接字或连接模式的客户端UDP套接字）<br>sendto：发送数据报（用于非连接模式的UDP套接字）</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
