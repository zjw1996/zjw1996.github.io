<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DreamWei</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zjw1996.github.io/"/>
  <updated>2020-01-15T06:38:28.087Z</updated>
  <id>http://zjw1996.github.io/</id>
  
  <author>
    <name>Stephen Z</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习随笔：C++的四种强制类型转换符</title>
    <link href="http://zjw1996.github.io/2020/01/15/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9AC++%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%AC%A6/"/>
    <id>http://zjw1996.github.io/2020/01/15/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9AC++%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%AC%A6/</id>
    <published>2020-01-15T06:40:09.194Z</published>
    <updated>2020-01-15T06:38:28.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>C++的强制类型转换对类型转换做了细分，提供了四种不同类型转换，以支持不同需求的转换；类型转换有了统一的标示符，利于代码排查和检视。这四种类型转换是：static_case(静态转换)、dynamic_cast(动态转换)、const_cast(常量转换)和reinterpret_cast(不相关类型的转换)。<br>下面分别来介绍这四种转换：static_cast、dynamic_cast、const_cast、reinterpret_cast，它们都是类模板。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式均为：xx_cast&lt;type-id&gt;(expression) ，其中type-id-要转换成什么类型，expression-被转换类型的目标变量</span><br></pre></td></tr></table></figure><h1 id="static-case和dynamic-cast"><a href="#static-case和dynamic-cast" class="headerlink" title="static_case和dynamic_cast"></a>static_case和dynamic_cast</h1><h2 id="类的继承关系图"><a href="#类的继承关系图" class="headerlink" title="类的继承关系图"></a>类的继承关系图</h2><p><img src="https://img-blog.csdnimg.cn/20200115120248531.png" alt="在这里插入图片描述"><br>从图中可知，派生类不仅会继承基类中可继承的方法和属性，还有自身的方法和属性。<br>当我们从派生类向基类转换时，也就是上行转换，static_case和dynamic_cast这两种方法都是能安全转换的。但是当向下转换类型，也就是我们从基类向派生类转换，当我们采用传统的C语言和c++转换时，就会出现意想不到的情况，因为转换后派生类自己的方法和属性丢失了，一旦我们去调用派生类的方法和属性那就糟糕了，而dynamic_cast这种强制转换内部提供了安全的转换，解决了这种问题。其内部实现可参考<a href="https://blog.csdn.net/passion_wu128/article/details/38511957" target="_blank" rel="noopener">passion_wu128</a> 的这篇博客。<br>以下则主要讲static_case和dynamic_cast的用法和特点。</p><h2 id="static-case"><a href="#static-case" class="headerlink" title="static_case"></a>static_case</h2><p>（1）使用场景</p><p>   1 在基本数据类型之间转换，如把 int 转换为 char，这种带来安全性问题由程序员来保证； </p><p>   2 把空指针转换成目标类型的空指针。 </p><p>   3 用于类层次结构中基类和派生类之间指针或引用的转换。<br>        上行转换（派生类—-&gt;基类）是安全的；<br>        下行转换（基类—-&gt;派生类）由于没有动态类型检查，所以是不安全的。<br>   4 把任何类型的表达式转换成void类型</p><pre><code>注意：static_cast不能转换掉expression的const、volatile、或者__unaligned属性</code></pre><p>（2）使用特点</p><p>   主要执行非多态的转换操作，用于代替C中通常的转换操作。<br>    隐式转换都建议使用 static_cast 进行标明和替换。<br>    不能使用 static_cast 在有类型指针内转换。</p><p>类上行和下行转换举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Base</span><br><span class="line">&#123;&#125;;</span><br><span class="line"></span><br><span class="line">class Derived : public Base</span><br><span class="line">&#123;&#125;；</span><br><span class="line"></span><br><span class="line">Base* pB &#x3D; new Base();</span><br><span class="line">&#x2F;&#x2F;用static_cast的下行转换，不安全</span><br><span class="line">if(Derived* pD &#x3D; static_cast&lt;Derived*&gt;(pB))&#123;&#125;</span><br><span class="line"></span><br><span class="line">Derived* pD &#x3D; new Derived();</span><br><span class="line">&#x2F;&#x2F;上行转换，安全</span><br><span class="line">if(Base* pB &#x3D; static_cast&lt;Base*&gt;(pD))&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h2><p>（1）使用场景</p><p>   主要用于将一个父类的指针/引用转化为子类的指针/引用（下行转换）。<br>    注：由于这个dynamic_cast要耗费重大的运行成本，应避免频繁使用。</p><p>（2）使用特点</p><p> 1 基类必须要有虚函数，因为 dynamic_cast 是运行时类型检查，需要运行时类型信息，而这个信息是存储在类的虚函数表中。<br>  2 对于下行转换，dynamic_cast 是安全的（当类型不一致时，转换过来的是空指针），而 static_cast 是不安全的。<br>  3 对指针进行 dynamic_cast，失败返回 NULL，成功返回正常 cast 后的对象指针；对引用进行 dynamic_cast，失败抛出一个异常，成功返回正常 cast 后的对象引用。</p><p>（3）转换方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dynamic_cast&lt; type* &gt;(e)&#x2F;&#x2F;type必须是一个类类型且必须是一个有效的指针</span><br><span class="line">dynamic_cast&lt; type&amp; &gt;(e)&#x2F;&#x2F;type必须是一个类类型且必须是一个左值</span><br><span class="line">dynamic_cast&lt; type&amp;&amp; &gt;(e)&#x2F;&#x2F;type必须是一个类类型且必须是一个右值</span><br></pre></td></tr></table></figure><p>e的类型必须符合以下三个条件中的任何一个：<br>1、e的类型是目标类型type的公有派生类<br>2、e的类型是目标type的共有基类<br>3、e的类型就是目标type的类型。</p><p>如果一条dynamic_cast语句的转换目标是指针类型并且失败了，则结果为0。如果转换目标是引用类型并且失败了，则dynamic_cast运算符将抛出一个std::bad_cast异常(该异常定义在typeinfo标准库头文件中)。e也可以是一个空指针，结果是所需类型的空指针。</p><p>dynamic_cast主要用于类层次间的上行转换和下行转换，还可以用于类之间的交叉转换（cross cast）。</p><p>在类层次间进行上行转换时，dynamic_cast和static_cast的效果是一样的；在进行下行转换时，dynamic_cast具有类型检查的功能，比static_cast更安全。</p><p>代码举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class CBase    &#x2F;&#x2F; 基类(父类)</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    &#x2F;&#x2F; dynamic_cast在将父类cast到子类时，父类必须要有虚函数</span><br><span class="line">    virtual int test() &#123; return 0; &#125; &#x2F;&#x2F; 一定要是 virtual</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class CDerived : public CBase  &#x2F;&#x2F; 派生类(子类)</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int test() &#123; return 1; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    CBase *p_CBase &#x3D; new CBase;  &#x2F;&#x2F; 基类对象指针</span><br><span class="line">    CDerived *p_CDerived &#x3D; dynamic_cast&lt;CDerived *&gt;(p_CBase);  &#x2F;&#x2F; 将基类对象指针类型转换为派生类对象指针</span><br><span class="line"></span><br><span class="line">    CBase i_CBase;    &#x2F;&#x2F; 创建基类对象</span><br><span class="line">    CBase &amp;r_CBase &#x3D; i_CBase;    &#x2F;&#x2F; 基类对象的引用</span><br><span class="line">    CDerived &amp;r_CDerived &#x3D; dynamic_cast&lt;CDerived &amp;&gt;(r_CBase);  &#x2F;&#x2F; 将基类对象的引用转换派生类对象的引用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h1><p>表达式const_cast&lt;T<em>&gt;(a)被用于从一个类中去除以下这些属性：const, volatile, 和 __unaligned。其中T和a必须是相同的类型。<br>class A { };<br>void f()<br>{<br>    const A *pa = new A;//const对象<br>    A *pb;//非const对象<br>    //pb = pa; // 这里将出错，不能将const对象指针赋值给非const对象<br>    pb = const_cast&lt;A</em>&gt;(pa); // 现在OK了<br>    …<br>}<br>对于本身定义时为const的类型，即使你去掉const性，在你操作这片内容时候也要小心，只能读不能写操作，否则还是会出错。<br>const_cast操作不能在不同的种类间转换。相反，它仅仅把一个它作用的表达式转换成常量。它可以使一个本来不是const类型的数据转换成const类型的，或者把const属性去掉。</p><h1 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h1><p>reinterpret_cast运算符是用来处理无关类型之间的转换；它会产生一个新的值，这个值会有与原始参数（expressoin）有完全相同的比特位。</p><p>static_cast 和 reinterpret_cast 的用法和区别： static_cast 运算符完成<strong>相关类型</strong>之间的转换. 而 reinterpret_cast 处理<strong>互不相关</strong>的类型之间的转换.</p><p>所谓”相关类型”指的是从逻辑上来说,多多少少还有那么一点联系的类型,比如从 double 到 int,我们知道它们之间还是有联系的,只是精度差异而已,使用 static_cast 就是告诉编译器:我知道会引起精度损失,但是我不在乎. 又如从 void* 到 具体类型指针像 char<em>,从语义上我们知道 void</em> 可以是任意类型的指针,当然也有可能是 char* 型的指针,这就是所谓的”多多少少还有那么一点联系”的意思. 又如从派生类层次中的上行转换(即从派生类指针到基类指针,因为是安全的,所以可以用隐式类型转换)或者下行转换(不安全,应该用 dynamic_cast 代替).对于static_cast操作符,如果需要截断,补齐或者指针偏移编译器都会自动完成.注意这一点,是和 reinterpret_cast 的一个根本区别.reinterpret_cast做转换时编译器不会做任何检查,截断,补齐的操作,只是把比特位拷贝过去.所以 reinterpret_cast 常常被用作不同类型指针间的相互转换,因为所有类型的指针的长度都是一致的,按比特位拷贝后不会损失数据.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;C++的强制类型转换对类型转换做了细分，提供了四种不同类型转换，以支持不同需求的转换；类型转换有了统一的标示符，利于代码排查和检视。这四种类
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>学习随笔：继承、多态与虚函数</title>
    <link href="http://zjw1996.github.io/2020/01/14/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E7%BB%A7%E6%89%BF%E3%80%81%E5%A4%9A%E6%80%81%E4%B8%8E%E8%99%9A%E5%87%BD%E6%95%B0/"/>
    <id>http://zjw1996.github.io/2020/01/14/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E7%BB%A7%E6%89%BF%E3%80%81%E5%A4%9A%E6%80%81%E4%B8%8E%E8%99%9A%E5%87%BD%E6%95%B0/</id>
    <published>2020-01-14T06:14:32.066Z</published>
    <updated>2020-01-14T06:14:34.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>继承：所谓继承，是指在一个已存在类的基础上建立一个新类。通过继承联系在一起的类构成一种层次关系。已存在的类称为基类(base class)，新建立的类称为派生类(derived class)；也就是说在层次关系的根部的称为基类，从基类直接或者间接继承而来的类称为派生类。基类负责定义在层次关系中所有类的共性，即共同拥有的成员，而派生类定义了自身独有的成员。</p><p>虚函数：对于某些成员函数，基类希望它的派生类能各自定义自己的功能，就可在基类中将该函数声明为虚函数（在函数名前加virtual ）如 <code>virtual int f(int a) const {};</code></p><p>多态：顾名思义，多态就是“多种形态”的意思。它是面向对象程序设计的一个重要特征。在面向对象方法中一般是这样表述多态性的：同样的消息被不同类型的对象接收时导致的不同行为。所谓消息是指对类的成员函数的调用，不同行为是指不同的实现，也就是调用了不同的函数。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>1、继承方式有三种，即：public(公有继承)、private(私有继承)、protected(保护继承)，如果省略，则默认为private继承方式；<br>2、多重继承方式下，各基类之间要用逗号分开，每一个基类都有自己的继承方式，它们互不影响；<br>3、派生类只要写出其新增成员的声明或定义即可，基类的内容不必重复。<br>4、访问控制：某个类对其继承而来的成员的访问权限收到两个因素影响：一是在基类中该成员的访问说明符；二是在派生类的派生列表中的访问说明符。<br>派生访问说明符对于派生类的成员能否访问其直接基类的成员没什么影响。对基类成员的访问权限只与基类中的访问说明符有关。详细的访问关系如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">基类中      继承方式            子类中</span><br><span class="line"></span><br><span class="line">public     ＆ public继承        &#x3D;&gt; public</span><br><span class="line"></span><br><span class="line">public     ＆ protected继承     &#x3D;&gt; protected   </span><br><span class="line"></span><br><span class="line">public     ＆ private继承       &#x3D;&gt; private</span><br><span class="line"></span><br><span class="line">protected  ＆ public继承        &#x3D;&gt; protected</span><br><span class="line"></span><br><span class="line">protected  ＆ protected继承     &#x3D;&gt; protected   </span><br><span class="line"></span><br><span class="line">protected  ＆ private继承       &#x3D;&gt; private</span><br><span class="line"></span><br><span class="line">private    ＆ public继承        &#x3D;&gt; 子类无权访问</span><br><span class="line"></span><br><span class="line">private    ＆ protected继承     &#x3D;&gt; 子类无权访问</span><br><span class="line"></span><br><span class="line">private    ＆ private继承       &#x3D;&gt; 子类无权访问</span><br></pre></td></tr></table></figure><h3 id="单一继承下的构造函数与析构函数"><a href="#单一继承下的构造函数与析构函数" class="headerlink" title="单一继承下的构造函数与析构函数"></a>单一继承下的构造函数与析构函数</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>构造函数不能是虚函数。对于基类的构造函数，它仅仅是在派生类构造函数中被调用，这种机制不同于继承。也就是说，派生类不继承基类的构造函数，将构造函数声明为虚函数没有什么意义。<br>构造函数初始化数据成员的顺序：先调用基类的构造函数初始化其数据成员，再调用派生类的构造函数初始化其数据成员。<br>派生类构造函数的定义格式：<br>派生类构造函数(总参数表) :基类1构造函数(形参,形参,…), 派生类新增数据成员1(形参),派生类新增数据成员2(形参){};<br>如Q是基类，数据成员有bookno，price，B是其派生类，新增了数据成员money。B的构造函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B(const string&amp; a, double b,double c):Q(a ,b),money( c)&#123;&#125;;</span><br></pre></td></tr></table></figure><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><p>1、派生类与基类的析构函数没有什么联系，彼此独立，派生类或基类的析构函数只做各自类对象消亡前的清理工作;<br>2、在派生过程中，基类的析构函数不能继承，如果需要析构函数的话，就要在派生类中重新定义;<br>3、派生类析构函数的定义方法与没有继承关系的类中析构函数的定义方法完全相同，只要在函数体中负责把派生类新增的非对象成员的清理工作做好就够了，系统会自己调用基类及子对象的析构函数来对基类及子对象进行清理。<br>析构函数的执行顺序:<br>a、与构造函数的执行顺序正好相反<br>b、先析构派生类自己；<br>c、再析构各个子对象：如果有多个子对象，析构顺序与这些子对象在类中的说明次序相反；<br>d、最后才是析构基类。</p><p>虚构析函数的格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">虚析构函数的声明格式 :</span><br><span class="line">virtual ~类名()</span><br><span class="line">&#123;</span><br><span class="line">函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用虚构析函数的原因：<br>用new命令建立派生类对象时返回的是派生类指针，根据赋值兼容规则，可以把派生类指针赋给基类指针。当用delete 基类指针 来删除派生类对象时，只调用基类的析构函数, 不能释放派生类对象自身占有的内存空间。这一问题在引进虚析构函数后能够得到解决。</p><p>虚析构函数与一般虚函数的不同之处 :<br>当基类的析构函数被声明为虚函数时，它的派生类的析构函数也自动成为虚函数，这些析构函数不要求同名;<br>一个虚析构函数的版本被调用执行后，接着就要调用执行基类版本，依此类推，直到执行到派生序列的最开始的那个析构函数的版本为止，也即说派生类析构函数、基类析构函数能够依次被执行。</p><p>何时需要虚析构函数？<br>通过基类指针删除派生类对象时；<br>通过基类指针调用对象的析构函数。</p><h2 id="虚函数与多态"><a href="#虚函数与多态" class="headerlink" title="虚函数与多态"></a>虚函数与多态</h2><p>当我们使用基类的引用或者指针调用一个虚成员函数时会执行动态绑定。因为我们直到运行时才能知道到底调用了哪个版本的虚函数，所以所有虚函数都必须有定义。通常情况下如果我们不使用某个函数，则无需为该函数提供定义。但是我们必须为每个虚函数都提供定义，而不管是否被用到了，这是因为连编译器也无法确定到底会使用哪个虚函数。<br>有关动态绑定的理解（转自<a href="https://blog.csdn.net/chgaowei/article/details/6427731" target="_blank" rel="noopener">常高伟</a>）：<br><strong>为了支持c++的多态性，才用了动态绑定和静态绑定。</strong><br>需要理解的四个名词：<br>1、对象的静态类型：对象在声明时采用的类型。是在编译期确定的。<br>2、对象的动态类型：目前所指对象的类型。是在运行期决定的。<br>对象的动态类型可以更改，但是静态类型无法更改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class B</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">class C : public B</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">class D : public B</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">D* pD &#x3D; new D();&#x2F;&#x2F;pD的静态类型是它声明的类型D*，动态类型也是D*</span><br><span class="line">B* pB &#x3D; pD;&#x2F;&#x2F;pB的静态类型是它声明的类型B*，动态类型是pB所指向的对象pD的类型D*</span><br><span class="line">C* pC &#x3D; new C();</span><br><span class="line">pB &#x3D; pC;&#x2F;&#x2F;pB的动态类型是可以更改的，现在它的动态类型是C*</span><br></pre></td></tr></table></figure><p>3、静态绑定：绑定的是对象的静态类型，某特性（比如函数）依赖于对象的静态类型，发生在编译期。<br>4、动态绑定：绑定的是对象的动态类型，某特性（比如函数）依赖于对象的动态类型，发生在运行期。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class B</span><br><span class="line">&#123;</span><br><span class="line">    void DoSomething();</span><br><span class="line">    virtual void vfun();</span><br><span class="line">&#125;</span><br><span class="line">class C : public B</span><br><span class="line">&#123;</span><br><span class="line">    void DoSomething();&#x2F;&#x2F;首先说明一下，这个子类重新定义了父类的no-virtual函数，这是一个不好的设计，会导致名称遮掩；这里只是为了说明动态绑定和静态绑定才这样使用。</span><br><span class="line">    virtual void vfun();</span><br><span class="line">&#125;</span><br><span class="line">class D : public B</span><br><span class="line">&#123;</span><br><span class="line">    void DoSomething();</span><br><span class="line">    virtual void vfun();</span><br><span class="line">&#125;</span><br><span class="line">D* pD &#x3D; new D();</span><br><span class="line">B* pB &#x3D; pD;</span><br></pre></td></tr></table></figure><p>让我们看一下，pD-&gt;DoSomething()和pB-&gt;DoSomething()调用的是同一个函数吗？<br>不是的，虽然pD和pB都指向同一个对象。因为函数DoSomething是一个no-virtual函数，它是静态绑定的，也就是编译器会在编译期根据对象的静态类型来选择函数。pD的静态类型是D<em>，那么编译器在处理pD-&gt;DoSomething()的时候会将它指向D::DoSomething()。同理，pB的静态类型是B</em>，那pB-&gt;DoSomething()调用的就是B::DoSomething()。</p><p>让我们再来看一下，pD-&gt;vfun()和pB-&gt;vfun()调用的是同一个函数吗？<br>是的。因为vfun是一个虚函数，它动态绑定的，也就是说它绑定的是对象的动态类型，pB和pD虽然静态类型不同，但是他们同时指向一个对象，他们的动态类型是相同的，都是D*，所以，他们的调用的是同一个函数：D::vfun()。</p><p>上面都是针对对象指针的情况，对于引用（reference）的情况同样适用。</p><p>指针和引用的动态类型和静态类型可能会不一致，但是对象的动态类型和静态类型是一致的。<br>D.DoSomething()和D.vfun()永远调用的都是D::DoSomething()和D::vfun()。<br>至于那些事动态绑定，那些事静态绑定，有篇文章总结的非常好:<br>我总结了一句话：<strong>只有虚函数才使用的是动态绑定，其他的全部是静态绑定。</strong>目前我还没有发现不适用这句话的，如果有错误，希望你可以指出来。<br>特别需要注意的地方<br>当缺省参数和虚函数一起出现的时候情况有点复杂，极易出错。我们知道，虚函数是动态绑定的，但是为了执行效率，缺省参数是静态绑定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class B</span><br><span class="line">&#123;</span><br><span class="line"> virtual void vfun(int i &#x3D; 10);</span><br><span class="line">&#125;</span><br><span class="line">class D : public B</span><br><span class="line">&#123;</span><br><span class="line"> virtual void vfun(int i &#x3D; 20);</span><br><span class="line">&#125;</span><br><span class="line">D* pD &#x3D; new D();</span><br><span class="line">B* pB &#x3D; pD;</span><br><span class="line">pD-&gt;vfun();</span><br><span class="line">pB-&gt;vfun();</span><br></pre></td></tr></table></figure><p>有上面的分析可知pD-&gt;vfun()和pB-&gt;vfun()调用都是函数D::vfun()，但是他们的缺省参数是多少？<br>分析一下，缺省参数是静态绑定的，pD-&gt;vfun()时，pD的静态类型是D*，所以它的缺省参数应该是20；同理，pB-&gt;vfun()的缺省参数应该是10。编写代码验证了一下，正确。<br>对于这个特性，估计没有人会喜欢。所以，永远记住：<br>“绝不重新定义继承而来的缺省参数（Never redefine function’s inherited default parameters value.）”</p><p>多态的实现：</p><p>C++的多态性有两类：<br>1、静态多态性：也就是静态联编下实现的多态性，即是在程序编译时就能确定调用哪一个函数，函数重载和运算符重载实现的就是静态多态性；<br>2、动态多态性：也就是动态联编(虚函数)下实现的多态性，它只有在程序运行时才解决函数的调用问题，虚函数是实现动态多态性的基础<br>什么是联编 ?<br>又称为关联或绑定，是描述编译器决定在程序运行时，一个函数调用应执行哪段代码的一个术语，它把一个标识符与一个存储地址联系起来。</p><p><strong>虚函数</strong></p><p>声明格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">virtual 函数返回类型 函数名(形参表)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：<br>1、只有类的成员函数才能声明为虚函数，普通函数不存在继承关系，不能声明为虚函数；<br>2、virtual关键字出现在虚函数的声明处，在虚函数的类外定义时不加virtual；<br>3、静态成员函数不能声明为虚函数；<br>4、内联函数不能声明为虚函数；<br>5、构造函数也不能声明为虚函数，因为它是在对象产生之前运行的函数；<br>6、析构函数可以是虚函数而且通常声明为虚函数。</p><p>注：为什么要用指针-&gt;虚函数()方式而不是 对象.虚函数()方式来调用虚函数 ?<br>如果采用对象.虚函数()方式调用，只能得到一个个具体类的结果，不具备“跨类”功能。相反，指针则有“跨类”的能力，除此之外，引用也具备这种能力。</p><p><strong>虚基类</strong><br>如果一个派生类从多个基类中派生，而这些基类又有一个共同的基类，则在这个派生类将保留共同基类的多份副本。<br><img src="https://img-blog.csdnimg.cn/20200114141048547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU1Mjc0NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>要让派生类只保留共同基类的一份副本，可以让这个共同基类说明为虚基类。</p><p>虚基类的定义格式</p><p>格式： class 派生类 :virtual[继承方式] 基类名<br><img src="https://img-blog.csdnimg.cn/20200114141133851.png" alt="在这里插入图片描述"></p><p>虚基类及其派生类的构造函数和析构函数<br>构造函数<br>1）要求虚基类的构造函数只能调用一次。直接或间接继承虚基类的所有派生类，都必须在构造函数的成员初始化表中列出对虚基类的初始化。因此，要注意以下几点；<br>2）虚基类的构造函数在所有非虚基类之前调用；<br>3）若同一层次中包含多个虚基类，这些虚基类的构造函数按它们说明的次序调用；<br>4）若虚基类由非虚基派生而来，则先调用基类构造函数，再调用派生类的构造函数。<br>析构函数<br>调用顺序正好与它的构造函数调用顺序相反</p><p><strong>纯虚函数和抽象类</strong><br>纯虚函数</p><p>1)在某些情况下, 在基类中不能为虚函数提供具体定义, 这时可以把它说明为纯虚函数。它的定义留给派生类来完成。</p><p>2)纯虚函数的声明格式：<br>class 类名<br>{<br>    …<br>    virtual 返回类型 函数名(形参表) = 0；<br>    …<br>}<br>说明<br>1、纯虚函数没有也不允许有函数体，如果强行给它加上将会出现错误；<br>2、最后的“ = 0”并不表示函数的返回值为0，它只是形式上的作用，告诉编译系统“这是纯虚函数”；<br>3、是一个纯虚函数的声明语句，它的末尾应有分号；<br>4、纯虚函数的作用：在基类中为派生类保留一个虚函数的名字，以便派生类根据需要进行定义。如果在基类没有保留虚函数的名字，则无法实现多态性。<br>5、如果在一个类中声明了纯虚函数，而在其派生类中没有对该函数进行定义，则该虚函数在派生类中仍然为纯虚函数。</p><p>抽象类:</p><p>1.当一个类具有一个纯虚函数，这个类就是抽象类<br>2.抽象类不能实例化对象<br>3.子类继承抽象类，必须要实现纯虚函数，如果没有，子类也是抽象类<br>抽象类的作用：为了继承约束，根本不知道未来的实现<br>抽象类不能用作参数类型、函数返回类型或强制类型转换，但可以声明抽象类的指针或引用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;继承：所谓继承，是指在一个已存在类的基础上建立一个新类。通过继承联系在一起的类构成一种层次关系。已存在的类称为基类(base class)，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>学习随笔：什么是套接字(Socket)？</title>
    <link href="http://zjw1996.github.io/2020/01/12/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E5%A5%97%E6%8E%A5%E5%AD%97(Socket)%EF%BC%9F/"/>
    <id>http://zjw1996.github.io/2020/01/12/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E5%A5%97%E6%8E%A5%E5%AD%97(Socket)%EF%BC%9F/</id>
    <published>2020-01-12T05:42:45.890Z</published>
    <updated>2020-01-12T06:05:05.905Z</updated>
    
    <content type="html"><![CDATA[<p>网络套接字又叫网际插座，在英文中是Internet Socket。在网络中，套接字扮演的角色正如插座一样，它是一个端点，可以与网络中的其它套接字建立连接。<br>套接字是一个位于网络中特定节点的服务所具有的标识符。套接字包含一个节点地址和一个端口号，用来标识这一服务。</p><p>在网络中，由IP地址可以唯一确定一台主机，但是准确来说，网络通讯中的双方并不是主机，而是运行在主机上的进程，这样就需要进一步确定是主机中的哪个进程要进行网络通讯。因此，除了IP地址之外，还需要端口号来唯一确定主机中的通讯进程。IP地址和端口号就构成了一个网络中的唯一标识符，即套接字。</p><p>套接字允许两个进程进行通讯，这两个进程可能运行在同一台机器上，也可能运行在不同的机器上。更准确地说，套接字是使用标准Unix文件描述符来与其它计算机进行通讯的一种方式。</p><p>在Unix操作系统中，每一个读写操作都是通过读写文件描述符来完成的。一个文件描述符就是一个与打开的文件相关联的整数，它可以是一个网络连接、一个文本文件、一个终端或其它东西。</p><h1 id="1-套接字的用途"><a href="#1-套接字的用途" class="headerlink" title="1  套接字的用途"></a>1  套接字的用途</h1><p>Socket被用于客户端/服务端应用框架中。服务端是一个针对客户端的请求执行某些特定操作的进程。大多数应用层协议如FTP、SMTP和POP3使用Socket来建立客户端与服务端之间的连接，从而进行数据的交换。</p><h1 id="2-套接字的类型"><a href="#2-套接字的类型" class="headerlink" title="2 套接字的类型"></a>2 套接字的类型</h1><p>常见的套接字类型有三种。前两种被广泛地使用，而后一种使用较少。<br>一般情况下假定进程间使用同种类型的socket进行通讯，但事实上不同类型的socket之间并没有通讯上的限制。</p><p>1.流套接字：提供面向连接、可靠的数据传输服务。该服务将保证数据能够实现无差错、无重复发送，并按顺序接收。如果你通过流套接字发送三个字符”A, B, C”，它们将会以同样的顺序到达——”A, B, C”，原因在于流套接字使用TCP（传输控制协议）进行数据传输。如果传输失败，发送方将会收到错误提示符。</p><p>2.数据包套接字：提供无连接服务。你无需像使用流套接字那样建立一个连接，而只需将目的地址信息一同打包后发送出去。该服务使用UDP（用户数据报协议）进行传输，延迟小且效率高，缺点是不能保证数据传输的可靠性。</p><p>3.原始套接字：允许用户对底层通讯协议进行访问。能够对底层的传输机制进行控制，因此可以用原始套接字来操纵网络层和传输层应用。原始套接字并不是给普通用户使用的，它们主要被用于开发新的通讯协议，或是用来获取已有通讯协议的一些隐蔽功能的访问权限。</p><h1 id="3-常用Socket-API函数的功能"><a href="#3-常用Socket-API函数的功能" class="headerlink" title="3 常用Socket API函数的功能"></a>3 常用Socket API函数的功能</h1><h2 id="1-socket"><a href="#1-socket" class="headerlink" title="1 socket"></a>1 socket</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Windows:#include &lt;WinSock2.h&gt;</span><br><span class="line">&#x2F;&#x2F; Linux:#include &lt;sys&#x2F;types.h&gt; &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">int socket(int domain, int type, int protocol);</span><br></pre></td></tr></table></figure><p>创建套接字时使用，操作系统会返回套接字描述符。最初是面向TCP/IP协议栈的，但最终设计成可以面向其他协议簇。<br>就如使用文件描述符来访问文件一样。程序是用套接字描述符来访问套接字。<br>接下来来详细介绍这三个参数<br>1.domain<br>就如写信一样,不同国家写信的地址写法不同，英国美国有从街-区-市的从小到大的地址写法！而中国的地址写法是从大到小，市-区-街。就如不同域有着不同地址表示格式。<br>常见的域是:AF_INET(IPV4域),AF_INET6(IPV6域),AF_UNIX,AF_UPSPEC…</p><p>2.type<br>有SOCK_DGRAM 固定长度的、无连接的、不可靠的报文传递。两个进程不需要建立连接只需要向对方进程套接字发送一个报文。（有点像写信，你发送信息就代表你写了很多信件。每封都有地址，接收人。）<br>有SOCK_STREAM 可靠的,有序的,双向的连接型字节流。（有点像，你建了一条管道到别人家，建好以后你不用去送信，只需不断往管道里投字条。对方也可以往管道里投纸条到你家。）<br>有SOCK_SEQPACKET（和SOCK_STREAM 类似只是从套接字得到的不是字节流而是基于报文的服务。）<br>有SOCK_RAM（用于访问下面的网络层即IP层。构造自己的协议头部。）</p><p>3.protocol<br>这个参数通常是0，在前2个参数已经确认的情况下一般用来选择默认的协议。比如在AF_INET SOCK_STREAM的情况下默认选择TCP<br>在AF_INET SOCK_DGREAM 的情况下默认选择UDP。<br>就像一个文件描述符一样。可以用read函数 write函数对文件描述符进行操作。同理可以对套接字描述符进行操作。<br>但是并不是所有的文件描述符操作都适用于套接字描述符。最常用的对套接字描述符的操作是shutdown<br>#include&lt;sys/socket.h&gt;<br>int shutdown(int sockfd,int how)<br>如果how是SHUT_RD 表示关闭读端无法再从套接字里读取<br>如果how是SHUT_WR 表示关闭写端无法再往套接字里写<br>how是SHUT_RDWR 说明同时无法写和读！<br>可以关闭一个方向开启另一个方向，比如关闭了写端但是还可以继续读取!</p><h2 id="2-closesocket-close"><a href="#2-closesocket-close" class="headerlink" title="2 closesocket/close"></a>2 closesocket/close</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int closesocket(SOCKET sd);    &#x2F;&#x2F; Windows:#include &lt;WinSock2.h&gt;</span><br><span class="line">int close(int fd);             &#x2F;&#x2F; Linux:#include &lt;unistd.h&gt;</span><br></pre></td></tr></table></figure><p>①关闭一个描述符为sd/fd的套接<br>②如果多个进程共享一个套接字，调用函数将套接字引用计数减1，减至0才关闭。<br>③一个进程中的多线程对一个套接字的使用无计数。如果进程中的一个线程调用函数将一个套接字关闭，该进程中的其他线程也将不能访问该套接字。<br>返回值：0-成功，SOCKET_ERROR(-1)-失败。</p><h2 id="3-listen"><a href="#3-listen" class="headerlink" title="3 listen"></a>3 listen</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Windows:#include &lt;WinSock2.h&gt;</span><br><span class="line">&#x2F;&#x2F; Linux:#include &lt;sys&#x2F;types.h&gt; &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">int listen(int sockfd, int backlog);</span><br></pre></td></tr></table></figure><p>监听状态函数，置服务器端的流套接字处于监听状态，仅服务器端调用，并且仅用于面向连接的流式套接字。<br>两个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int sockfd：服务器端的流套接字，仅用于面向连接的流式套接字。</span><br><span class="line">int backlog：设置连接请求队列大小，即缓存队列，可以设置连接客户端的最大连接个数</span><br><span class="line">当有多个客户端向服务器请求时，会受到此值的影响，默认值为20。</span><br></pre></td></tr></table></figure><p>返回值：0-成功，SOCKET_ERROR(-1)-失败。</p><h2 id="4-connect"><a href="#4-connect" class="headerlink" title="4 connect"></a>4 connect</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Windows:#include &lt;WinSock2.h&gt;</span><br><span class="line">&#x2F;&#x2F; Linux:#include &lt;sys&#x2F;types.h&gt; &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">int connect(int sockfd,const struct sockaddr *addr, socklen_t addrlen)</span><br></pre></td></tr></table></figure><p>客户端程序调用connect函数来使客户套接字与特定计算机的特定端口的套接字连接。<br>仅用于客户端， 可用于TCP客户端，也可用于UDP客户端。</p><pre><code>TCP客户端：建立TCP连接。UDP客户端：UDP是无连接的，功能只是指定服务器端点地址，实际是没有连接的，但看着像连接一样。</code></pre><p>三个参数：</p><pre><code>int sockfd：客户端套接字。const struct sockaddr *addr：服务端套接字地址。socklen_t addrlen：服务端套接字长度。</code></pre><h2 id="5-accept"><a href="#5-accept" class="headerlink" title="5 accept"></a>5 accept</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Windows:#include &lt;WinSock2.h&gt;</span><br><span class="line">&#x2F;&#x2F; Linux:#include &lt;sys&#x2F;types.h&gt; &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">int accept(int sockfd, struct sockaddr *cliaddr, socklen_t *addrlen)</span><br></pre></td></tr></table></figure><p>服务器端程序调用accept函数，从处于监听状态的流套接字的客户连接请求队列中取出排在最前的一个客户请求，并且创建一个新的套接字来与客户端套接字创建连接通道。<br>仅用于TCP套接字，仅用于服务器。<br>三个参数：</p><pre><code>int sockfd：服务端套接字。const struct sockaddr *addr：客户端套接字地址。socklen_t *addrlen：客户端套接字长度地址。</code></pre><p>如果使用主套接字与客户端通信，因为TCP是点对点连接，那么在某一时刻服务器就只能为一个客户端提供服务，而不能够实现并发的TCP服务器。因此创建新套接字与客户端通信，服务器通过多线程、多进程创建新套接字，即可实现并发的TCP服务器。</p><h2 id="6-send，sendto"><a href="#6-send，sendto" class="headerlink" title="6 send，sendto"></a>6 send，sendto</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Windows:#include &lt;WinSock2.h&gt;</span><br><span class="line">&#x2F;&#x2F; Linux:#include &lt;sys&#x2F;types.h&gt; &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">ssize_t send(int sockfd, const void *buf, size_t len, int flags);</span><br><span class="line">ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,</span><br><span class="line">                      const struct sockaddr *dest_addr, socklen_t addrlen);</span><br></pre></td></tr></table></figure><p>  ①send函数用于TCP套接字（客户端与服务器端）或调用了connect函数的UDP客户端套接字。<br>② sendto函数用于UDP服务器端套接字与未调用connect函数的UDP客户端套接字。</p><h2 id="7-recv-recvfrom"><a href="#7-recv-recvfrom" class="headerlink" title="7 recv, recvfrom"></a>7 recv, recvfrom</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Windows:#include &lt;WinSock2.h&gt;</span><br><span class="line">&#x2F;&#x2F; Linux:#include &lt;sys&#x2F;types.h&gt; &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">ssize_t recv(int sockfd, void *buf, size_t len, int flags);</span><br><span class="line">ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,</span><br><span class="line">                        struct sockaddr *src_addr, socklen_t *addrlen);</span><br></pre></td></tr></table></figure><p>①recv函数从TCP连接的另一端接收数据，或者从调用了connect函数的UDP客户端套接字接收服务器发来的数据。<br>②recvfrom用于从UDP服务器端套接字与未调用用connect函数的UDP客户端套接字接收对端数据。</p><h1 id="4-函数小结"><a href="#4-函数小结" class="headerlink" title="4 函数小结"></a>4 函数小结</h1><p>socket：创建套接字<br>connect：“连接”远端服务器（仅用于客户端，注意TCP与UDP的区别）<br>closesocket/close：释放/关闭套接字<br>listen：置服务器端TCP套接字为监听模式，并设置队列大小（仅用于服务器端TCP套接字）<br>accept：接收/提取一个连接请求，创建新套接字，通过新套接字与客户端进行连接（仅用于服务器端的TCP套接字，也称为阻塞函数）<br>recv：接收数据（用于TCP套接字或连接模式的客户端UDP套接字）<br>recvfrom：接收数据报（用于非连接模式的UDP套接字）<br>send：发送数据（用于TCP套接字或连接模式的客户端UDP套接字）<br>sendto：发送数据报（用于非连接模式的UDP套接字）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网络套接字又叫网际插座，在英文中是Internet Socket。在网络中，套接字扮演的角色正如插座一样，它是一个端点，可以与网络中的其它套接字建立连接。&lt;br&gt;套接字是一个位于网络中特定节点的服务所具有的标识符。套接字包含一个节点地址和一个端口号，用来标识这一服务。&lt;/p
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
